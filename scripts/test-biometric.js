/**
 * Script de test pour l'authentification biom√©trique
 */

import { BiometricService } from '../services/biometricService.js';

const testBiometric = async () => {
  console.log('üîê Test de l\'authentification biom√©trique\\n');

  try {
    // 1. Test de disponibilit√©
    console.log('1Ô∏è‚É£ Test de disponibilit√© de la biom√©trie');
    
    const isAvailable = await BiometricService.isBiometricAvailable();
    console.log(`   - Biom√©trie disponible: ${isAvailable}`);
    
    if (!isAvailable) {
      console.log('   - ‚ö†Ô∏è  Biom√©trie non disponible sur cet appareil');
      console.log('   - Test termin√© (fonctionnalit√© non support√©e)');
      return;
    }

    // 2. Test des types support√©s
    console.log('\\n2Ô∏è‚É£ Test des types d\'authentification support√©s');
    
    const supportedTypes = await BiometricService.getSupportedTypes();
    console.log(`   - Types support√©s: ${supportedTypes.names.join(', ')}`);
    console.log(`   - Nombre de types: ${supportedTypes.types.length}`);

    // 3. Test de sauvegarde des pr√©f√©rences
    console.log('\\n3Ô∏è‚É£ Test de sauvegarde des pr√©f√©rences');
    
    const testEmail = 'test@example.com';
    const saveResult = await BiometricService.saveBiometricPreferences(true, testEmail);
    console.log(`   - Sauvegarde r√©ussie: ${saveResult}`);

    // 4. Test de chargement des pr√©f√©rences
    console.log('\\n4Ô∏è‚É£ Test de chargement des pr√©f√©rences');
    
    const prefs = await BiometricService.loadBiometricPreferences();
    console.log(`   - Pr√©f√©rences charg√©es:`, prefs);
    console.log(`   - Biom√©trie activ√©e: ${prefs.enabled}`);
    console.log(`   - Email configur√©: ${prefs.email}`);

    // 5. Test de v√©rification pour un utilisateur
    console.log('\\n5Ô∏è‚É£ Test de v√©rification pour un utilisateur');
    
    const isEnabledForUser = await BiometricService.isBiometricEnabledForUser(testEmail);
    console.log(`   - Activ√©e pour ${testEmail}: ${isEnabledForUser}`);
    
    const isEnabledForOther = await BiometricService.isBiometricEnabledForUser('other@example.com');
    console.log(`   - Activ√©e pour other@example.com: ${isEnabledForOther}`);

    // 6. Test d'authentification automatique
    console.log('\\n6Ô∏è‚É£ Test d\'authentification automatique');
    
    const autoAuthResult = await BiometricService.autoAuthenticateWithBiometrics(testEmail);
    console.log(`   - R√©sultat authentification automatique:`, autoAuthResult);
    
    if (autoAuthResult.success) {
      console.log('   - ‚úÖ Authentification automatique r√©ussie');
    } else {
      console.log(`   - ‚ùå √âchec: ${autoAuthResult.reason}`);
    }

    // 7. Test de d√©sactivation
    console.log('\\n7Ô∏è‚É£ Test de d√©sactivation');
    
    const disableResult = await BiometricService.disableBiometrics();
    console.log(`   - D√©sactivation r√©ussie: ${disableResult}`);
    
    const prefsAfterDisable = await BiometricService.loadBiometricPreferences();
    console.log(`   - Pr√©f√©rences apr√®s d√©sactivation:`, prefsAfterDisable);

    // 8. Test des messages d'erreur
    console.log('\\n8Ô∏è‚É£ Test des messages d\'erreur');
    
    const errorMessages = [
      'UserCancel',
      'UserFallback', 
      'SystemCancel',
      'AuthenticationFailed',
      'PasscodeNotSet',
      'FingerprintScannerNotAvailable',
      'FingerprintScannerNotEnrolled',
      'FingerprintScannerLockout',
      'FingerprintScannerLockoutPermanent'
    ];
    
    errorMessages.forEach(error => {
      const message = BiometricService.getErrorMessage(error);
      console.log(`   - ${error}: "${message}"`);
    });

    console.log('\\n‚úÖ Tests de l\'authentification biom√©trique termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests biom√©triques:', error);
  }
};

// Ex√©cuter les tests si le script est appel√© directement
if (typeof window === 'undefined') {
  testBiometric();
}

export default testBiometric; 
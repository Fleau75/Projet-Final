/**
 * Script de test pour v√©rifier le syst√®me d'authentification
 */

const AuthService = require('../services/authService').AuthService;

async function testAuthentication() {
  console.log('üß™ Test du syst√®me d\'authentification...\n');

  try {
    // 1. V√©rifier l'√©tat initial
    console.log('1Ô∏è‚É£ V√©rification de l\'√©tat initial...');
    const isAuth = await AuthService.isAuthenticated();
    console.log(`   - Utilisateur connect√©: ${isAuth}`);
    
    const currentUser = await AuthService.getCurrentUser();
    console.log(`   - Utilisateur actuel: ${currentUser ? currentUser.name : 'Aucun'}\n`);

    // 2. Cr√©er un compte de test
    console.log('2Ô∏è‚É£ Cr√©ation d\'un compte de test...');
    const testUser = {
      firstName: 'Test',
      lastName: 'Utilisateur',
      email: 'test@example.com',
      phone: '0123456789'
    };

    const registerResult = await AuthService.register('test@example.com', '123456', testUser);
    console.log(`   - Inscription r√©ussie: ${registerResult.success}`);
    console.log(`   - UID: ${registerResult.user.uid}\n`);

    // 3. V√©rifier que l'utilisateur est connect√©
    console.log('3Ô∏è‚É£ V√©rification apr√®s inscription...');
    const isAuthAfterRegister = await AuthService.isAuthenticated();
    console.log(`   - Utilisateur connect√©: ${isAuthAfterRegister}`);
    
    const userAfterRegister = await AuthService.getCurrentUser();
    console.log(`   - Utilisateur: ${userAfterRegister ? userAfterRegister.name : 'Aucun'}\n`);

    // 4. Se d√©connecter
    console.log('4Ô∏è‚É£ D√©connexion...');
    await AuthService.logout();
    console.log('   - D√©connexion r√©ussie\n');

    // 5. V√©rifier l'√©tat apr√®s d√©connexion
    console.log('5Ô∏è‚É£ V√©rification apr√®s d√©connexion...');
    const isAuthAfterLogout = await AuthService.isAuthenticated();
    console.log(`   - Utilisateur connect√©: ${isAuthAfterLogout}`);
    
    const userAfterLogout = await AuthService.getCurrentUser();
    console.log(`   - Utilisateur: ${userAfterLogout ? userAfterLogout.name : 'Aucun'}\n`);

    // 6. Se reconnecter
    console.log('6Ô∏è‚É£ Test de reconnexion...');
    const loginResult = await AuthService.login('test@example.com', '123456');
    console.log(`   - Connexion r√©ussie: ${loginResult.success}`);
    console.log(`   - UID: ${loginResult.user.uid}\n`);

    // 7. Test avec mauvais mot de passe
    console.log('7Ô∏è‚É£ Test avec mauvais mot de passe...');
    try {
      await AuthService.login('test@example.com', 'mauvais');
      console.log('   ‚ùå Erreur: La connexion aurait d√ª √©chouer');
    } catch (error) {
      console.log(`   ‚úÖ Erreur attendue: ${error.message}`);
    }

    // 8. Test avec email inexistant
    console.log('8Ô∏è‚É£ Test avec email inexistant...');
    try {
      await AuthService.login('inexistant@example.com', '123456');
      console.log('   ‚ùå Erreur: La connexion aurait d√ª √©chouer');
    } catch (error) {
      console.log(`   ‚úÖ Erreur attendue: ${error.message}`);
    }

    console.log('\nüéâ Tous les tests sont termin√©s !');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests
testAuthentication(); 
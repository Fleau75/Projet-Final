
// Script √† ex√©cuter dans l'application React Native
// Copier ce code dans la console de d√©veloppement

import AsyncStorage from '@react-native-async-storage/async-storage';

async function checkAccessibilityFilters() {
  try {
    console.log('üìä 1. V√©rification des pr√©f√©rences d'accessibilit√©...');
    
    // V√©rifier les pr√©f√©rences d'accessibilit√©
    const accessibilityPrefs = await AsyncStorage.getItem('accessibilityPrefs');
    console.log('üîß Pr√©f√©rences d'accessibilit√© brutes:', accessibilityPrefs);
    
    if (accessibilityPrefs) {
      const prefs = JSON.parse(accessibilityPrefs);
      console.log('üîß Pr√©f√©rences d'accessibilit√© pars√©es:', prefs);
      
      const hasActivePrefs = Object.values(prefs).some(pref => pref);
      console.log('üîß Pr√©f√©rences actives:', hasActivePrefs);
      
      if (hasActivePrefs) {
        console.log('‚ö†Ô∏è ATTENTION: Des pr√©f√©rences d'accessibilit√© sont activ√©es !');
        console.log('‚ö†Ô∏è Cela peut filtrer les marqueurs migr√©s qui ont tous les crit√®res √† false');
      }
    }
    
    console.log('\nüìä 2. V√©rification des marqueurs migr√©s...');
    
    // V√©rifier les marqueurs de l'utilisateur test
    const testEmail = 'flo@gmail.com';
    const userMarkersKey = `user_${testEmail}_mapMarkers`;
    const userMarkers = await AsyncStorage.getItem(userMarkersKey);
    
    if (userMarkers) {
      const markers = JSON.parse(userMarkers);
      console.log(`üìç ${markers.length} marqueurs trouv√©s pour ${testEmail}`);
      
      markers.forEach((marker, index) => {
        console.log(`üìç Marqueur ${index + 1}: ${marker.name}`);
        console.log(`   üîß Accessibilit√©:`, marker.accessibility);
        
        // V√©rifier si ce marqueur passerait les filtres
        if (accessibilityPrefs) {
          const prefs = JSON.parse(accessibilityPrefs);
          const hasActivePrefs = Object.values(prefs).some(pref => pref);
          
          if (hasActivePrefs) {
            const accessibility = marker.accessibility || {};
            let wouldBeFiltered = false;
            
            if (prefs.requireRamp && !accessibility.ramp) {
              console.log(`   ‚ùå Filtr√©: pas de rampe`);
              wouldBeFiltered = true;
            }
            if (prefs.requireElevator && !accessibility.elevator) {
              console.log(`   ‚ùå Filtr√©: pas d'ascenseur`);
              wouldBeFiltered = true;
            }
            if (prefs.requireAccessibleParking && !accessibility.parking) {
              console.log(`   ‚ùå Filtr√©: pas de parking accessible`);
              wouldBeFiltered = true;
            }
            if (prefs.requireAccessibleToilets && !accessibility.toilets) {
              console.log(`   ‚ùå Filtr√©: pas de toilettes accessibles`);
              wouldBeFiltered = true;
            }
            
            if (!wouldBeFiltered) {
              console.log(`   ‚úÖ Passerait les filtres d'accessibilit√©`);
            }
          } else {
            console.log(`   ‚úÖ Aucune pr√©f√©rence active, marqueur visible`);
          }
        }
      });
    } else {
      console.log('‚ùå Aucun marqueur trouv√© pour l'utilisateur test');
    }
    
    console.log('\nüìä 3. Solution recommand√©e...');
    console.log('üí° Pour corriger le probl√®me d'affichage des marqueurs migr√©s:');
    console.log('   1. D√©sactiver temporairement les pr√©f√©rences d'accessibilit√©');
    console.log('   2. Ou mettre √† jour les crit√®res d'accessibilit√© des marqueurs migr√©s');
    console.log('   3. Ou ajouter une option "Afficher tous les marqueurs"');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

// Ex√©cuter le diagnostic
checkAccessibilityFilters();

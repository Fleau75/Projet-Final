/**
 * Script de diagnostic pour v√©rifier les mots de passe stock√©s
 */

import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthService } from '../services/authService.js';

const diagnosePassword = async () => {
  console.log('üîç Diagnostic des mots de passe stock√©s\n');

  try {
    // 1. V√©rifier l'utilisateur connect√©
    console.log('1Ô∏è‚É£ V√©rification de l\'utilisateur connect√©');
    const currentUser = await AuthService.getCurrentUser();
    console.log('   - Utilisateur connect√©:', currentUser ? currentUser.email : 'Aucun');
    
    if (!currentUser) {
      console.log('   ‚ùå Aucun utilisateur connect√©');
      return;
    }
    
    // 2. V√©rifier les donn√©es utilisateur de test
    console.log('\n2Ô∏è‚É£ V√©rification des donn√©es utilisateur de test');
    const testUserKey = `user_${currentUser.email}`;
    const testUser = await AsyncStorage.getItem(testUserKey);
    console.log('   - Cl√© utilisateur de test:', testUserKey);
    console.log('   - Donn√©es trouv√©es:', !!testUser);
    
    if (testUser) {
      const userData = JSON.parse(testUser);
      console.log('   - Email stock√©:', userData.email);
      console.log('   - Mot de passe stock√©:', userData.password);
      console.log('   - Nom stock√©:', userData.name);
    }
    
    // 3. V√©rifier le mot de passe normal
    console.log('\n3Ô∏è‚É£ V√©rification du mot de passe normal');
    const storedPassword = await AsyncStorage.getItem('userPassword');
    console.log('   - Mot de passe stock√© (normal):', storedPassword);
    
    // 4. V√©rifier l'√©tat d'authentification
    console.log('\n4Ô∏è‚É£ V√©rification de l\'√©tat d\'authentification');
    const isAuthenticated = await AuthService.isAuthenticated();
    console.log('   - Utilisateur authentifi√©:', isAuthenticated);
    
    // 5. V√©rifier le profil utilisateur
    console.log('\n5Ô∏è‚É£ V√©rification du profil utilisateur');
    const userProfile = await AsyncStorage.getItem('userProfile');
    console.log('   - Profil utilisateur trouv√©:', !!userProfile);
    
    if (userProfile) {
      const profile = JSON.parse(userProfile);
      console.log('   - Email du profil:', profile.email);
      console.log('   - Nom du profil:', profile.name);
    }
    
    // 6. Test de connexion avec diff√©rents mots de passe
    console.log('\n6Ô∏è‚É£ Test de connexion');
    
    // Test avec le mot de passe de test
    if (testUser) {
      const userData = JSON.parse(testUser);
      try {
        await AuthService.login(currentUser.email, userData.password);
        console.log('   ‚úÖ Connexion r√©ussie avec le mot de passe de test');
      } catch (error) {
        console.log('   ‚ùå √âchec de connexion avec le mot de passe de test:', error.message);
      }
    }
    
    // Test avec le mot de passe normal
    if (storedPassword) {
      try {
        await AuthService.login(currentUser.email, storedPassword);
        console.log('   ‚úÖ Connexion r√©ussie avec le mot de passe normal');
      } catch (error) {
        console.log('   ‚ùå √âchec de connexion avec le mot de passe normal:', error.message);
      }
    }
    
    console.log('\nüéâ Diagnostic termin√© !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
};

// Ex√©cuter le diagnostic
diagnosePassword(); 
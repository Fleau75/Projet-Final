#!/usr/bin/env node

/**
 * Script pour injecter directement les donn√©es visiteur dans AsyncStorage
 * Ce script simule l'ajout de donn√©es dans le stockage de l'application
 */

const fs = require('fs');
const path = require('path');

console.log('üîß === INJECTION DONN√âES VISITEUR ===');

// Donn√©es visiteur compl√®tes √† injecter
const visitorData = {
  // Profil visiteur
  'userProfile': {
    uid: 'visitor_001',
    name: 'Visiteur AccessPlus',
    email: 'visiteur@accessplus.com',
    phone: '',
    joinDate: 'juin 2025',
    isVisitor: true,
    isVerified: false,
    avatar: null
  },
  
  // Favoris de test
  'favorites': [
    {
      id: 'place-1',
      name: 'Restaurant Le Marais',
      address: '35 rue des Archives, 75003 Paris',
      type: 'restaurant',
      rating: 4.5,
      reviewCount: 42,
      image: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=500',
      accessibility: {
        wheelchair: true,
        hearing: true,
        visual: false,
        cognitive: true
      },
      addedAt: new Date().toISOString()
    },
    {
      id: 'place-2', 
      name: 'Mus√©e du Louvre',
      address: 'Rue de Rivoli, 75001 Paris',
      type: 'museum',
      rating: 4.8,
      reviewCount: 1250,
      image: 'https://images.unsplash.com/photo-1565967511849-76a60a516170?w=500',
      accessibility: {
        wheelchair: true,
        hearing: true,
        visual: true,
        cognitive: true
      },
      addedAt: new Date().toISOString()
    }
  ],
  
  // Marqueurs sur la carte
  'mapMarkers': [
    {
      id: 'marker-1',
      placeId: 'place-1',
      position: { latitude: 48.8566, longitude: 2.3522 },
      title: 'Restaurant Le Marais',
      description: 'Restaurant accessible',
      type: 'favorite'
    },
    {
      id: 'marker-2',
      placeId: 'place-2', 
      position: { latitude: 48.8606, longitude: 2.3376 },
      title: 'Mus√©e du Louvre',
      description: 'Mus√©e accessible',
      type: 'favorite'
    }
  ],
  
  // Pr√©f√©rences d'accessibilit√©
  'accessibilityPrefs': {
    requireRamp: true,
    requireElevator: true,
    requireAccessibleParking: true,
    requireAccessibleToilets: true
  },
  
  // Historique des visites
  'history': [
    {
      id: 'visit-1',
      placeId: 'place-1',
      placeName: 'Restaurant Le Marais',
      visitDate: new Date(Date.now() - 86400000).toISOString(), // Hier
      rating: 4,
      notes: 'Tr√®s bon restaurant, accessible en fauteuil roulant'
    },
    {
      id: 'visit-2',
      placeId: 'place-2',
      placeName: 'Mus√©e du Louvre', 
      visitDate: new Date(Date.now() - 172800000).toISOString(), // Avant-hier
      rating: 5,
      notes: 'Excellente exp√©rience, personnel tr√®s accueillant'
    }
  ],
  
  // Avis laiss√©s
  'reviews': [
    {
      id: 'review-1',
      placeId: 'place-1',
      placeName: 'Restaurant Le Marais',
      rating: 4,
      comment: 'Excellent restaurant avec une bonne accessibilit√©. L\'entr√©e est de plain-pied et les toilettes sont adapt√©es.',
      date: new Date(Date.now() - 86400000).toISOString(),
      helpful: 3
    }
  ],
  
  // Param√®tres utilisateur
  'userSettings': {
    theme: 'light',
    notifications: true,
    locationServices: true,
    textSize: 'medium',
    language: 'fr'
  }
};

async function injectVisitorData() {
  try {
    console.log('üì¶ Pr√©paration des donn√©es visiteur...');
    
    // 1. Cr√©er un fichier de donn√©es pr√™tes √† injecter
    const dataFile = path.join(__dirname, 'visitor-data-injection.json');
    fs.writeFileSync(dataFile, JSON.stringify(visitorData, null, 2));
    
    console.log('‚úÖ Donn√©es pr√©par√©es');
    console.log(`üìÅ Fichier: ${dataFile}`);
    
    // 2. Cr√©er un script d'injection pour l'application
    const injectionScript = `
// Script √† ex√©cuter dans l'application React Native
// Copier ce code dans la console de d√©veloppement ou l'injecter via le debugger

import AsyncStorage from '@react-native-async-storage/async-storage';

const visitorData = ${JSON.stringify(visitorData, null, 2)};

async function injectVisitorData() {
  try {
    console.log('üîß Injection des donn√©es visiteur...');
    
    // Injecter chaque type de donn√©es
    await AsyncStorage.setItem('userProfile', JSON.stringify(visitorData.userProfile));
    await AsyncStorage.setItem('favorites', JSON.stringify(visitorData.favorites));
    await AsyncStorage.setItem('mapMarkers', JSON.stringify(visitorData.mapMarkers));
    await AsyncStorage.setItem('accessibilityPrefs', JSON.stringify(visitorData.accessibilityPrefs));
    await AsyncStorage.setItem('history', JSON.stringify(visitorData.history));
    await AsyncStorage.setItem('reviews', JSON.stringify(visitorData.reviews));
    await AsyncStorage.setItem('userSettings', JSON.stringify(visitorData.userSettings));
    
    console.log('‚úÖ Donn√©es visiteur inject√©es avec succ√®s !');
    console.log('üîÑ Red√©marrez l\'application pour voir les changements');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'injection:', error);
  }
}

// Ex√©cuter l'injection
injectVisitorData();
`;
    
    const injectionFile = path.join(__dirname, 'injection-code.js');
    fs.writeFileSync(injectionFile, injectionScript);
    
    console.log('‚úÖ Code d\'injection cr√©√©');
    console.log(`üìÅ Fichier: ${injectionFile}`);
    
    // 3. Cr√©er des instructions simples
    console.log('\nüìã === INSTRUCTIONS D\'INJECTION ===');
    console.log('1. Ouvrir l\'application AccessPlus');
    console.log('2. Ouvrir la console de d√©veloppement (F12 ou Cmd+Option+I)');
    console.log('3. Copier le contenu du fichier injection-code.js');
    console.log('4. Coller et ex√©cuter dans la console');
    console.log('5. Red√©marrer l\'application');
    console.log('6. Se connecter en mode visiteur');
    
    console.log('\nüí° ALTERNATIVE SIMPLE:');
    console.log('1. Ouvrir l\'application');
    console.log('2. Aller dans les param√®tres');
    console.log('3. Cliquer sur "Restaurer donn√©es visiteur"');
    console.log('4. Red√©marrer l\'application');
    
    console.log('\n‚úÖ Injection pr√™te !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la pr√©paration:', error);
  }
}

// Fonction pour nettoyer les donn√©es visiteur existantes
async function cleanVisitorData() {
  try {
    console.log('üßπ Nettoyage des donn√©es visiteur existantes...');
    
    const cleanScript = `
// Script pour nettoyer et corriger les donn√©es visiteur existantes
import AsyncStorage from '@react-native-async-storage/async-storage';

async function cleanVisitorData() {
  try {
    console.log('üßπ Nettoyage des donn√©es visiteur...');
    
    // Supprimer les anciennes donn√©es
    await AsyncStorage.removeItem('accessibilityPrefs');
    await AsyncStorage.removeItem('user_visitor_accessibilityPrefs');
    
    // Injecter les nouvelles donn√©es avec le bon format
    const newAccessibilityPrefs = {
      requireRamp: false,
      requireElevator: false,
      requireAccessibleParking: false,
      requireAccessibleToilets: false
    };
    
    await AsyncStorage.setItem('accessibilityPrefs', JSON.stringify(newAccessibilityPrefs));
    await AsyncStorage.setItem('user_visitor_accessibilityPrefs', JSON.stringify(newAccessibilityPrefs));
    
    console.log('‚úÖ Donn√©es visiteur nettoy√©es et corrig√©es !');
    console.log('üîÑ Red√©marrez l\'application pour voir les changements');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

// Ex√©cuter le nettoyage
cleanVisitorData();
`;
    
    const cleanFile = path.join(__dirname, 'clean-visitor-data.js');
    fs.writeFileSync(cleanFile, cleanScript);
    
    console.log('‚úÖ Script de nettoyage cr√©√©');
    console.log(`üìÅ Fichier: ${cleanFile}`);
    
    console.log('\nüßπ === INSTRUCTIONS DE NETTOYAGE ===');
    console.log('1. Ouvrir l\'application AccessPlus');
    console.log('2. Ouvrir la console de d√©veloppement');
    console.log('3. Copier le contenu du fichier clean-visitor-data.js');
    console.log('4. Coller et ex√©cuter dans la console');
    console.log('5. Red√©marrer l\'application');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du script de nettoyage:', error);
  }
}

// Ex√©cuter l'injection et le nettoyage
injectVisitorData();
cleanVisitorData(); 
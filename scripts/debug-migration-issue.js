/**
 * Script de diagnostic pour comprendre le probl√®me de migration
 * Pourquoi la migration ne fonctionne pas depuis l'√©cran d'accueil
 */

const AsyncStorage = require('@react-native-async-storage/async-storage').default;
import { AuthService } from '../services/authService.js';
import StorageService from '../services/storageService.js';

async function debugMigrationIssue() {
  console.log('üîç === DIAGNOSTIC PROBL√àME MIGRATION ===');
  
  try {
    // 1. V√©rifier l'√©tat actuel
    console.log('\nüì± 1. √âTAT ACTUEL');
    const currentUser = await AuthService.getCurrentUser();
    console.log('Utilisateur actuel:', currentUser);
    
    const isVisitor = await AuthService.isCurrentUserVisitor();
    console.log('Est visiteur:', isVisitor);
    
    // 2. V√©rifier les donn√©es visiteur
    console.log('\nüë§ 2. DONN√âES VISITEUR');
    const visitorData = await StorageService.getAllUserData('visitor');
    console.log('Donn√©es visiteur disponibles:', Object.keys(visitorData));
    console.log('Nombre de cl√©s visiteur:', Object.keys(visitorData).length);
    
    if (Object.keys(visitorData).length > 0) {
      console.log('D√©tail des donn√©es visiteur:');
      for (const [key, value] of Object.entries(visitorData)) {
        if (Array.isArray(value)) {
          console.log(`  ${key}: ${value.length} √©l√©ments`);
        } else if (typeof value === 'object') {
          console.log(`  ${key}: objet avec ${Object.keys(value).length} propri√©t√©s`);
        } else {
          console.log(`  ${key}: ${value}`);
        }
      }
    }
    
    // 3. Simuler le processus d'inscription
    console.log('\nüß™ 3. SIMULATION INSCRIPTION');
    const testEmail = 'test-migration@example.com';
    const testPassword = '123456';
    const testUserData = {
      email: testEmail,
      firstName: 'Test',
      lastName: 'Migration',
      phone: ''
    };
    
    console.log('Donn√©es de test:', testUserData);
    
    // 4. V√©rifier si l'utilisateur existe d√©j√†
    console.log('\nüîç 4. V√âRIFICATION UTILISATEUR EXISTANT');
    const testUserKey = `user_${testEmail}`;
    const existingTestUser = await AsyncStorage.getItem(testUserKey);
    const existingProfileKey = `user_${testEmail}_userProfile`;
    const existingProfile = await AsyncStorage.getItem(existingProfileKey);
    
    console.log('Utilisateur de test existant:', existingTestUser ? 'Oui' : 'Non');
    console.log('Profil normal existant:', existingProfile ? 'Oui' : 'Non');
    
    // 5. Nettoyer l'utilisateur de test s'il existe
    if (existingTestUser || existingProfile) {
      console.log('\nüßπ 5. NETTOYAGE UTILISATEUR DE TEST');
      await AsyncStorage.removeItem(testUserKey);
      await AsyncStorage.removeItem(existingProfileKey);
      await AsyncStorage.removeItem(`user_${testEmail}_userPassword`);
      await AsyncStorage.removeItem(`user_${testEmail}_isAuthenticated`);
      await AsyncStorage.removeItem(`user_${testEmail}_currentUser`);
      console.log('‚úÖ Utilisateur de test nettoy√©');
    }
    
    // 6. Simuler la migration
    console.log('\nüîÑ 6. SIMULATION MIGRATION');
    const migrationResult = await StorageService.migrateVisitorDataToUser(testEmail);
    console.log('R√©sultat migration:', migrationResult);
    
    // 7. V√©rifier les donn√©es migr√©es
    console.log('\n‚úÖ 7. V√âRIFICATION DONN√âES MIGR√âES');
    const migratedData = await StorageService.getAllUserData(testEmail);
    console.log('Donn√©es migr√©es:', Object.keys(migratedData));
    console.log('Nombre de cl√©s migr√©es:', Object.keys(migratedData).length);
    
    if (Object.keys(migratedData).length > 0) {
      console.log('D√©tail des donn√©es migr√©es:');
      for (const [key, value] of Object.entries(migratedData)) {
        if (Array.isArray(value)) {
          console.log(`  ${key}: ${value.length} √©l√©ments`);
        } else if (typeof value === 'object') {
          console.log(`  ${key}: objet avec ${Object.keys(value).length} propri√©t√©s`);
        } else {
          console.log(`  ${key}: ${value}`);
        }
      }
    }
    
    // 8. Nettoyer apr√®s le test
    console.log('\nüßπ 8. NETTOYAGE FINAL');
    await StorageService.clearUserData(testEmail);
    console.log('‚úÖ Donn√©es de test nettoy√©es');
    
    console.log('\nüìä === R√âSUM√â ===');
    console.log('‚úÖ Diagnostic termin√©');
    console.log(`üìù Donn√©es visiteur trouv√©es: ${Object.keys(visitorData).length}`);
    console.log(`üìù Donn√©es migr√©es: ${Object.keys(migratedData).length}`);
    console.log(`üìù Migration r√©ussie: ${migrationResult.migrated}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

// Ex√©cuter le diagnostic
debugMigrationIssue(); 

console.log('üîç === DIAGNOSTIC MIGRATION ET AFFICHAGE ===');

async function diagnoseMigrationAndDisplay() {
  try {
    console.log('üìä 1. V√©rification des pr√©f√©rences d\'accessibilit√©...');
    
    // V√©rifier les pr√©f√©rences d'accessibilit√©
    const accessibilityPrefs = await AsyncStorage.getItem('accessibilityPrefs');
    console.log('üîß Pr√©f√©rences d\'accessibilit√© brutes:', accessibilityPrefs);
    
    if (accessibilityPrefs) {
      const prefs = JSON.parse(accessibilityPrefs);
      console.log('üîß Pr√©f√©rences d\'accessibilit√© pars√©es:', prefs);
      
      const hasActivePrefs = Object.values(prefs).some(pref => pref);
      console.log('üîß Pr√©f√©rences actives:', hasActivePrefs);
      
      if (hasActivePrefs) {
        console.log('‚ö†Ô∏è ATTENTION: Des pr√©f√©rences d\'accessibilit√© sont activ√©es !');
        console.log('‚ö†Ô∏è Cela peut filtrer les marqueurs migr√©s qui ont tous les crit√®res √† false');
      }
    }
    
    console.log('\nüìä 2. V√©rification des marqueurs migr√©s...');
    
    // V√©rifier les marqueurs de l'utilisateur test
    const testEmail = 'flo@gmail.com';
    const userMarkersKey = `user_${testEmail}_mapMarkers`;
    const userMarkers = await AsyncStorage.getItem(userMarkersKey);
    
    if (userMarkers) {
      const markers = JSON.parse(userMarkers);
      console.log(`üìç ${markers.length} marqueurs trouv√©s pour ${testEmail}`);
      
      markers.forEach((marker, index) => {
        console.log(`üìç Marqueur ${index + 1}: ${marker.name}`);
        console.log(`   üîß Accessibilit√©:`, marker.accessibility);
        
        // V√©rifier si ce marqueur passerait les filtres
        if (accessibilityPrefs) {
          const prefs = JSON.parse(accessibilityPrefs);
          const hasActivePrefs = Object.values(prefs).some(pref => pref);
          
          if (hasActivePrefs) {
            const accessibility = marker.accessibility || {};
            let wouldBeFiltered = false;
            
            if (prefs.requireRamp && !accessibility.ramp) {
              console.log(`   ‚ùå Filtr√©: pas de rampe`);
              wouldBeFiltered = true;
            }
            if (prefs.requireElevator && !accessibility.elevator) {
              console.log(`   ‚ùå Filtr√©: pas d'ascenseur`);
              wouldBeFiltered = true;
            }
            if (prefs.requireAccessibleParking && !accessibility.parking) {
              console.log(`   ‚ùå Filtr√©: pas de parking accessible`);
              wouldBeFiltered = true;
            }
            if (prefs.requireAccessibleToilets && !accessibility.toilets) {
              console.log(`   ‚ùå Filtr√©: pas de toilettes accessibles`);
              wouldBeFiltered = true;
            }
            
            if (!wouldBeFiltered) {
              console.log(`   ‚úÖ Passerait les filtres d'accessibilit√©`);
            }
          } else {
            console.log(`   ‚úÖ Aucune pr√©f√©rence active, marqueur visible`);
          }
        }
      });
    } else {
      console.log('‚ùå Aucun marqueur trouv√© pour l\'utilisateur test');
    }
    
    console.log('\nüìä 3. Solution recommand√©e...');
    console.log('üí° Pour corriger le probl√®me d\'affichage des marqueurs migr√©s:');
    console.log('   1. D√©sactiver temporairement les pr√©f√©rences d\'accessibilit√©');
    console.log('   2. Ou mettre √† jour les crit√®res d\'accessibilit√© des marqueurs migr√©s');
    console.log('   3. Ou ajouter une option "Afficher tous les marqueurs"');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

// Ex√©cuter le diagnostic
diagnoseMigrationAndDisplay(); 
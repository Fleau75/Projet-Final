/**
 * Script de test pour les notifications
 * Teste toutes les fonctionnalit√©s du service de notifications
 */

// Mock des services Expo pour les tests Node.js
const mockNotifications = {
  getPermissionsAsync: async () => ({ status: 'granted' }),
  requestPermissionsAsync: async () => ({ status: 'granted' }),
  scheduleNotificationAsync: async (notification) => {
    console.log('üì± Notification simul√©e:', notification.content.title);
    return 'mock-notification-id';
  },
  setNotificationHandler: () => {},
  setNotificationChannelAsync: () => {},
  getExpoPushTokenAsync: async () => ({ data: 'mock-push-token-12345' }),
  addNotificationReceivedListener: () => ({ remove: () => {} }),
  addNotificationResponseReceivedListener: () => ({ remove: () => {} }),
};

const mockDevice = {
  isDevice: true,
};

const mockPlatform = {
  OS: 'ios',
};

// Mock du StorageService
const mockStorageService = {
  getNotificationPrefs: async () => ({
    newPlaces: true,
    reviews: true,
    updates: true,
  }),
  setPushToken: async (token) => console.log('Token sauvegard√©:', token),
  getPushToken: async () => 'mock-push-token-12345',
};

// Mock du NotificationService
class MockNotificationService {
  static async initialize() {
    console.log('üîî Initialisation simul√©e...');
    return true;
  }

  static async isEnabled() {
    return true;
  }

  static async getNotificationPreferences() {
    return await mockStorageService.getNotificationPrefs();
  }

  static async sendLocalNotification(title, body, data = {}) {
    console.log(`üì± Notification locale: "${title}" - "${body}"`);
    return true;
  }

  static async notifyNewPlace(placeName, distance) {
    const prefs = await this.getNotificationPreferences();
    if (!prefs.newPlaces) return false;
    
    return await this.sendLocalNotification(
      'üè† Nouveau lieu accessible !',
      `${placeName} a √©t√© ajout√© √† ${distance}m de chez vous`,
      { type: 'newPlace', placeName, distance }
    );
  }

  static async notifyNewReview(placeName, rating) {
    const prefs = await this.getNotificationPreferences();
    if (!prefs.reviews) return false;
    
    const stars = '‚≠ê'.repeat(rating);
    return await this.sendLocalNotification(
      '‚≠ê Nouvel avis !',
      `${placeName} a re√ßu un avis ${stars}`,
      { type: 'newReview', placeName, rating }
    );
  }

  static async notifyAppUpdate(version, features = []) {
    const prefs = await this.getNotificationPreferences();
    if (!prefs.updates) return false;
    
    const featuresText = features.length > 0 ? `\nNouvelles fonctionnalit√©s : ${features.join(', ')}` : '';
    return await this.sendLocalNotification(
      'üîÑ Mise √† jour disponible',
      `AccessPlus v${version} est disponible !${featuresText}`,
      { type: 'appUpdate', version, features }
    );
  }

  static async notifyNearbyPlace(placeName, distance, accessibility) {
    const prefs = await this.getNotificationPreferences();
    if (!prefs.newPlaces) return false;
    
    const accessibilityText = accessibility.length > 0 ? ` (${accessibility.join(', ')})` : '';
    return await this.sendLocalNotification(
      'üìç Lieu accessible √† proximit√©',
      `${placeName}${accessibilityText} √† ${distance}m`,
      { type: 'nearbyPlace', placeName, distance, accessibility }
    );
  }

  static async getPushToken() {
    return await mockStorageService.getPushToken();
  }
}

async function testNotifications() {
  console.log('üîî Test du service de notifications (Mode Simulation)...\n');

  try {
    // Test 1: Initialisation
    console.log('1Ô∏è‚É£ Test d\'initialisation...');
    const initialized = await MockNotificationService.initialize();
    console.log(`   ${initialized ? '‚úÖ' : '‚ùå'} Initialisation: ${initialized ? 'R√©ussie' : '√âchou√©e'}\n`);

    // Test 2: V√©rification des permissions
    console.log('2Ô∏è‚É£ Test des permissions...');
    const isEnabled = await MockNotificationService.isEnabled();
    console.log(`   ${isEnabled ? '‚úÖ' : '‚ùå'} Permissions: ${isEnabled ? 'Accord√©es' : 'Refus√©es'}\n`);

    // Test 3: R√©cup√©ration des pr√©f√©rences
    console.log('3Ô∏è‚É£ Test des pr√©f√©rences...');
    const prefs = await MockNotificationService.getNotificationPreferences();
    console.log('   üìã Pr√©f√©rences actuelles:');
    console.log(`      - Nouveaux lieux: ${prefs.newPlaces ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Nouveaux avis: ${prefs.reviews ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Mises √† jour: ${prefs.updates ? '‚úÖ' : '‚ùå'}\n`);

    // Test 4: Notification locale simple
    console.log('4Ô∏è‚É£ Test notification locale...');
    const localResult = await MockNotificationService.sendLocalNotification(
      'Test AccessPlus',
      'Ceci est un test de notification locale'
    );
    console.log(`   ${localResult ? '‚úÖ' : '‚ùå'} Notification locale: ${localResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 5: Notification nouveau lieu
    console.log('5Ô∏è‚É£ Test notification nouveau lieu...');
    const newPlaceResult = await MockNotificationService.notifyNewPlace('Restaurant Test', '250');
    console.log(`   ${newPlaceResult ? '‚úÖ' : '‚ùå'} Notification nouveau lieu: ${newPlaceResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 6: Notification nouvel avis
    console.log('6Ô∏è‚É£ Test notification nouvel avis...');
    const newReviewResult = await MockNotificationService.notifyNewReview('Mus√©e Test', 5);
    console.log(`   ${newReviewResult ? '‚úÖ' : '‚ùå'} Notification nouvel avis: ${newReviewResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 7: Notification mise √† jour
    console.log('7Ô∏è‚É£ Test notification mise √† jour...');
    const updateResult = await MockNotificationService.notifyAppUpdate('1.2.0', ['Nouvelles fonctionnalit√©s']);
    console.log(`   ${updateResult ? '‚úÖ' : '‚ùå'} Notification mise √† jour: ${updateResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 8: Notification lieu proche
    console.log('8Ô∏è‚É£ Test notification lieu proche...');
    const nearbyResult = await MockNotificationService.notifyNearbyPlace('Caf√© Test', '150', ['Rampe', 'Ascenseur']);
    console.log(`   ${nearbyResult ? '‚úÖ' : '‚ùå'} Notification lieu proche: ${nearbyResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 9: R√©cup√©ration du token
    console.log('9Ô∏è‚É£ Test r√©cup√©ration token...');
    const token = await MockNotificationService.getPushToken();
    console.log(`   ${token ? '‚úÖ' : '‚ùå'} Token: ${token ? token.substring(0, 20) + '...' : 'Non disponible'}\n`);

    console.log('üéâ Tests termin√©s !');
    console.log('\nüìù R√©sum√©:');
    console.log(`   - Initialisation: ${initialized ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Permissions: ${isEnabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Notifications locales: ${localResult ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Notifications sp√©cialis√©es: ${newPlaceResult && newReviewResult && updateResult && nearbyResult ? '‚úÖ' : '‚ùå'}`);

    console.log('\nüí° Note: Ces tests sont en mode simulation. Pour tester les vraies notifications, lancez l\'app sur un appareil physique.');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testNotifications();
}

module.exports = { testNotifications }; 
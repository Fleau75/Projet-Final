/**
 * Script de test pour les notifications
 * Teste toutes les fonctionnalit√©s du service de notifications
 */

const NotificationService = require('../services/notificationService');

async function testNotifications() {
  console.log('üîî Test du service de notifications...\n');

  try {
    // Test 1: Initialisation
    console.log('1Ô∏è‚É£ Test d\'initialisation...');
    const initialized = await NotificationService.initialize();
    console.log(`   ${initialized ? '‚úÖ' : '‚ùå'} Initialisation: ${initialized ? 'R√©ussie' : '√âchou√©e'}\n`);

    // Test 2: V√©rification des permissions
    console.log('2Ô∏è‚É£ Test des permissions...');
    const isEnabled = await NotificationService.isEnabled();
    console.log(`   ${isEnabled ? '‚úÖ' : '‚ùå'} Permissions: ${isEnabled ? 'Accord√©es' : 'Refus√©es'}\n`);

    // Test 3: R√©cup√©ration des pr√©f√©rences
    console.log('3Ô∏è‚É£ Test des pr√©f√©rences...');
    const prefs = await NotificationService.getNotificationPreferences();
    console.log('   üìã Pr√©f√©rences actuelles:');
    console.log(`      - Nouveaux lieux: ${prefs.newPlaces ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Nouveaux avis: ${prefs.reviews ? '‚úÖ' : '‚ùå'}`);
    console.log(`      - Mises √† jour: ${prefs.updates ? '‚úÖ' : '‚ùå'}\n`);

    // Test 4: Notification locale simple
    console.log('4Ô∏è‚É£ Test notification locale...');
    const localResult = await NotificationService.sendLocalNotification(
      'Test AccessPlus',
      'Ceci est un test de notification locale'
    );
    console.log(`   ${localResult ? '‚úÖ' : '‚ùå'} Notification locale: ${localResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 5: Notification nouveau lieu
    console.log('5Ô∏è‚É£ Test notification nouveau lieu...');
    const newPlaceResult = await NotificationService.notifyNewPlace('Restaurant Test', '250');
    console.log(`   ${newPlaceResult ? '‚úÖ' : '‚ùå'} Notification nouveau lieu: ${newPlaceResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 6: Notification nouvel avis
    console.log('6Ô∏è‚É£ Test notification nouvel avis...');
    const newReviewResult = await NotificationService.notifyNewReview('Mus√©e Test', 5);
    console.log(`   ${newReviewResult ? '‚úÖ' : '‚ùå'} Notification nouvel avis: ${newReviewResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 7: Notification mise √† jour
    console.log('7Ô∏è‚É£ Test notification mise √† jour...');
    const updateResult = await NotificationService.notifyAppUpdate('1.2.0', ['Nouvelles fonctionnalit√©s']);
    console.log(`   ${updateResult ? '‚úÖ' : '‚ùå'} Notification mise √† jour: ${updateResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 8: Notification lieu proche
    console.log('8Ô∏è‚É£ Test notification lieu proche...');
    const nearbyResult = await NotificationService.notifyNearbyPlace('Caf√© Test', '150', ['Rampe', 'Ascenseur']);
    console.log(`   ${nearbyResult ? '‚úÖ' : '‚ùå'} Notification lieu proche: ${nearbyResult ? 'Envoy√©e' : '√âchou√©e'}\n`);

    // Test 9: R√©cup√©ration du token
    console.log('9Ô∏è‚É£ Test r√©cup√©ration token...');
    const token = await NotificationService.getPushToken();
    console.log(`   ${token ? '‚úÖ' : '‚ùå'} Token: ${token ? token.substring(0, 20) + '...' : 'Non disponible'}\n`);

    console.log('üéâ Tests termin√©s !');
    console.log('\nüìù R√©sum√©:');
    console.log(`   - Initialisation: ${initialized ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Permissions: ${isEnabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Notifications locales: ${localResult ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Notifications sp√©cialis√©es: ${newPlaceResult && newReviewResult && updateResult && nearbyResult ? '‚úÖ' : '‚ùå'}`);

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  testNotifications();
}

module.exports = { testNotifications }; 
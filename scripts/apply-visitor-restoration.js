#!/usr/bin/env node

/**
 * Script pour appliquer automatiquement la restauration des donn√©es visiteur
 * Utilise la fonction restoreVisitorData du StorageService
 */

const fs = require('fs');
const path = require('path');

console.log('üîß === APPLICATION RESTAURATION VISITEUR ===');

async function applyVisitorRestoration() {
  try {
    console.log('üì¶ Pr√©paration de la restauration...');
    
    // Cr√©er un fichier de configuration pour l'application
    const configData = {
      timestamp: new Date().toISOString(),
      action: 'restore_visitor_data',
      instructions: [
        '1. L\'application va automatiquement restaurer les donn√©es visiteur au d√©marrage',
        '2. Se connecter en mode visiteur (visiteur@accessplus.com)',
        '3. Les donn√©es seront disponibles imm√©diatement',
        '4. Tester la migration vers un compte permanent'
      ],
      expectedData: {
        favorites: 2,
        history: 2,
        mapMarkers: 2,
        accessibilityPrefs: 5
      }
    };
    
    // Sauvegarder la configuration
    const configFile = path.join(__dirname, 'restoration-config.json');
    fs.writeFileSync(configFile, JSON.stringify(configData, null, 2));
    
    console.log('‚úÖ Configuration de restauration cr√©√©e');
    console.log(`üìÅ Fichier: ${configFile}`);
    
    // Cr√©er un script de test simple
    const testScript = `#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que la restauration fonctionne
 */

const fs = require('fs');
const path = require('path');

async function testRestoration() {
  console.log('üß™ === TEST RESTAURATION VISITEUR ===');
  
  try {
    // V√©rifier que la configuration existe
    const configFile = path.join(__dirname, 'restoration-config.json');
    if (!fs.existsSync(configFile)) {
      console.log('‚ùå Configuration de restauration non trouv√©e');
      return;
    }
    
    const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    console.log('‚úÖ Configuration de restauration trouv√©e');
    
    console.log('\\nüìã DONN√âES ATTENDUES:');
    console.log(\`  ‚ù§Ô∏è Favoris: \${config.expectedData.favorites} lieux\`);
    console.log(\`  üìñ Historique: \${config.expectedData.history} visites\`);
    console.log(\`  üìç Marqueurs: \${config.expectedData.mapMarkers} points\`);
    console.log(\`  ‚ôø Accessibilit√©: \${config.expectedData.accessibilityPrefs} crit√®res\`);
    
    console.log('\\nüîß INSTRUCTIONS DE TEST:');
    console.log('1. Ouvrir l\'application AccessPlus');
    console.log('2. Se connecter en mode visiteur');
    console.log('3. V√©rifier que les donn√©es sont pr√©sentes');
    console.log('4. Cr√©er un nouveau compte avec migration');
    console.log('5. V√©rifier que les donn√©es sont migr√©es');
    
    console.log('\\n‚úÖ Test de restauration pr√™t !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testRestoration();
`;
    
    const testFile = path.join(__dirname, 'test-restoration.js');
    fs.writeFileSync(testFile, testScript);
    fs.chmodSync(testFile, '755');
    
    console.log('‚úÖ Script de test cr√©√©');
    console.log(`üìÅ Fichier: ${testFile}`);
    
    // R√©sum√© final
    console.log('\nüìä === R√âSUM√â RESTAURATION ===');
    console.log('‚úÖ Configuration: restoration-config.json');
    console.log('‚úÖ Script de test: test-restoration.js');
    
    console.log('\nüîß PROCHAINES √âTAPES:');
    console.log('1. Lancer l\'application avec: npx expo start');
    console.log('2. Se connecter en mode visiteur');
    console.log('3. V√©rifier que les donn√©es sont pr√©sentes');
    console.log('4. Tester la migration vers un compte permanent');
    
    console.log('\nüí° COMMANDES UTILES:');
    console.log('node scripts/test-restoration.js');
    console.log('node scripts/diagnose-storage.js');
    
    console.log('\n‚úÖ Restauration configur√©e avec succ√®s !');
    console.log('üîÑ Les donn√©es seront restaur√©es automatiquement au d√©marrage de l\'application');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'application:', error);
  }
}

// Ex√©cuter la restauration
applyVisitorRestoration(); 
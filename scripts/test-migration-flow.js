/**
 * Script de test pour v√©rifier le flux complet de migration des donn√©es visiteur
 * Simule le processus d'inscription avec migration
 */

const AsyncStorage = require('@react-native-async-storage/async-storage');
const { AuthService } = require('../services/authService.js');
const StorageService = require('../services/storageService.js');

async function testMigrationFlow() {
  console.log('üß™ === TEST FLUX MIGRATION ===');
  
  try {
    // 1. Nettoyer l'environnement
    console.log('\nüßπ 1. NETTOYAGE ENVIRONNEMENT');
    await clearTestData();
    
    // 2. Cr√©er des donn√©es visiteur de test
    console.log('\nüë§ 2. CR√âATION DONN√âES VISITEUR DE TEST');
    await createTestVisitorData();
    
    // 3. V√©rifier les donn√©es visiteur
    console.log('\nüîç 3. V√âRIFICATION DONN√âES VISITEUR');
    const visitorData = await StorageService.getAllUserData('visitor');
    console.log('Donn√©es visiteur cr√©√©es:', Object.keys(visitorData));
    
    // 4. Simuler l'inscription avec migration
    console.log('\nüìù 4. SIMULATION INSCRIPTION AVEC MIGRATION');
    const testEmail = 'test-migration@example.com';
    const testPassword = '123456';
    const testUserData = {
      email: testEmail,
      firstName: 'Test',
      lastName: 'Migration',
      phone: '',
      migrateVisitorData: true // Activer la migration
    };
    
    const result = await AuthService.register(testEmail, testPassword, testUserData);
    console.log('R√©sultat inscription:', result);
    
    // 5. V√©rifier les donn√©es migr√©es
    console.log('\n‚úÖ 5. V√âRIFICATION DONN√âES MIGR√âES');
    const migratedData = await StorageService.getAllUserData(testEmail);
    console.log('Donn√©es migr√©es:', Object.keys(migratedData));
    
    // 6. Comparer les donn√©es
    console.log('\nüìä 6. COMPARAISON DONN√âES');
    console.log('Donn√©es visiteur originales:');
    for (const [key, value] of Object.entries(visitorData)) {
      if (Array.isArray(value)) {
        console.log(`  ${key}: ${value.length} √©l√©ments`);
      } else if (typeof value === 'object') {
        console.log(`  ${key}: objet avec ${Object.keys(value).length} propri√©t√©s`);
      } else {
        console.log(`  ${key}: ${value}`);
      }
    }
    
    console.log('\nDonn√©es migr√©es:');
    for (const [key, value] of Object.entries(migratedData)) {
      if (Array.isArray(value)) {
        console.log(`  ${key}: ${value.length} √©l√©ments`);
      } else if (typeof value === 'object') {
        console.log(`  ${key}: objet avec ${Object.keys(value).length} propri√©t√©s`);
      } else {
        console.log(`  ${key}: ${value}`);
      }
    }
    
    // 7. Nettoyer apr√®s le test
    console.log('\nüßπ 7. NETTOYAGE FINAL');
    await clearTestData();
    await StorageService.clearUserData(testEmail);
    
    console.log('\nüìä === R√âSUM√â TEST ===');
    console.log('‚úÖ Test termin√© avec succ√®s');
    console.log(`üìù Donn√©es visiteur cr√©√©es: ${Object.keys(visitorData).length}`);
    console.log(`üìù Donn√©es migr√©es: ${Object.keys(migratedData).length}`);
    console.log(`üìù Migration r√©ussie: ${result.success}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

async function clearTestData() {
  console.log('üßπ Nettoyage des donn√©es de test...');
  
  // Nettoyer les donn√©es visiteur
  await StorageService.clearUserData('visitor');
  
  // Nettoyer les utilisateurs de test
  const testEmails = ['test-migration@example.com'];
  for (const email of testEmails) {
    await AsyncStorage.removeItem(`user_${email}`);
    await AsyncStorage.removeItem(`user_${email}_userProfile`);
    await AsyncStorage.removeItem(`user_${email}_userPassword`);
    await AsyncStorage.removeItem(`user_${email}_isAuthenticated`);
    await AsyncStorage.removeItem(`user_${email}_currentUser`);
    await StorageService.clearUserData(email);
  }
  
  console.log('‚úÖ Donn√©es de test nettoy√©es');
}

async function createTestVisitorData() {
  console.log('üë§ Cr√©ation de donn√©es visiteur de test...');
  
  // Cr√©er des favoris de test
  const testFavorites = [
    {
      id: 'test-place-1',
      name: 'Restaurant Test 1',
      address: '123 Rue Test, Paris',
      type: 'restaurant',
      rating: 4.5
    },
    {
      id: 'test-place-2', 
      name: 'Mus√©e Test 2',
      address: '456 Avenue Test, Paris',
      type: 'culture',
      rating: 4.2
    }
  ];
  
  // Cr√©er des marqueurs de carte de test
  const testMapMarkers = [
    {
      id: 'marker-1',
      title: 'Marqueur Test 1',
      description: 'Description du marqueur 1',
      coordinate: {
        latitude: 48.8566,
        longitude: 2.3522
      }
    },
    {
      id: 'marker-2',
      title: 'Marqueur Test 2', 
      description: 'Description du marqueur 2',
      coordinate: {
        latitude: 48.8584,
        longitude: 2.2945
      }
    }
  ];
  
  // Cr√©er des pr√©f√©rences d'accessibilit√© de test
  const testAccessibilityPrefs = {
    wheelchair: true,
    visual: false,
    hearing: true,
    cognitive: false
  };
  
  // Sauvegarder les donn√©es visiteur
  await StorageService.setUserData('favorites', testFavorites, 'visitor');
  await StorageService.setUserData('mapMarkers', testMapMarkers, 'visitor');
  await StorageService.setUserData('accessibilityPrefs', testAccessibilityPrefs, 'visitor');
  await StorageService.setUserData('searchRadius', 5000, 'visitor');
  await StorageService.setUserData('mapStyle', 'standard', 'visitor');
  
  console.log('‚úÖ Donn√©es visiteur de test cr√©√©es');
}

// Ex√©cuter le test
testMigrationFlow(); 
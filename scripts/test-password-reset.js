/**
 * Script de test pour la fonctionnalit√© de r√©cup√©ration de mot de passe
 */

import AsyncStorage from '@react-native-async-storage/async-storage';
import { AuthService } from '../services/authService.js';

const testPasswordReset = async () => {
  console.log('üß™ Test de la fonctionnalit√© de r√©cup√©ration de mot de passe\n');

  try {
    // 1. Test avec un utilisateur de test existant
    console.log('1Ô∏è‚É£ Test avec un utilisateur de test existant (test@example.com)');
    
    const testEmail = 'test@example.com';
    
    // V√©rifier que l'utilisateur existe
    const userExists = await AuthService.checkUserExists(testEmail);
    console.log(`   - Utilisateur existe: ${userExists}`);
    
    if (userExists) {
      // Envoyer l'email de r√©initialisation
      const resetResult = await AuthService.sendPasswordResetEmail(testEmail);
      console.log(`   - Email envoy√©: ${resetResult.success}`);
      console.log(`   - Token g√©n√©r√©: ${resetResult.resetToken}`);
      
      // V√©rifier que le token est valide
      const isValidToken = await AuthService.verifyResetToken(testEmail);
      console.log(`   - Token valide: ${isValidToken}`);
      
      // Mettre √† jour le mot de passe
      const updateResult = await AuthService.updatePassword(testEmail, 'nouveau123');
      console.log(`   - Mot de passe mis √† jour: ${updateResult.success}`);
      
      // V√©rifier que le nouveau mot de passe fonctionne
      try {
        await AuthService.login(testEmail, 'nouveau123');
        console.log('   - ‚úÖ Connexion r√©ussie avec le nouveau mot de passe');
      } catch (error) {
        console.log('   - ‚ùå √âchec de connexion avec le nouveau mot de passe');
      }
    }
    
    console.log('\n2Ô∏è‚É£ Test avec un utilisateur inexistant');
    
    const fakeEmail = 'fake@example.com';
    
    // V√©rifier que l'utilisateur n'existe pas
    const fakeUserExists = await AuthService.checkUserExists(fakeEmail);
    console.log(`   - Utilisateur existe: ${fakeUserExists}`);
    
    if (!fakeUserExists) {
      try {
        await AuthService.sendPasswordResetEmail(fakeEmail);
        console.log('   - ‚ùå Erreur: Email envoy√© pour un utilisateur inexistant');
      } catch (error) {
        console.log('   - ‚úÖ Correct: Erreur pour utilisateur inexistant');
      }
    }
    
    console.log('\n3Ô∏è‚É£ Test d\'expiration du token');
    
    // Cr√©er un token expir√© manuellement
    const expiredTokenData = {
      email: testEmail,
      token: 'expired_token',
      expiresAt: Date.now() - 1000, // Expir√© il y a 1 seconde
      createdAt: new Date().toISOString()
    };
    
    await AsyncStorage.setItem(`resetToken_${testEmail}`, JSON.stringify(expiredTokenData));
    
    // V√©rifier que le token expir√© n'est pas valide
    const isExpiredTokenValid = await AuthService.verifyResetToken(testEmail);
    console.log(`   - Token expir√© valide: ${isExpiredTokenValid}`);
    
    if (!isExpiredTokenValid) {
      console.log('   - ‚úÖ Correct: Token expir√© rejet√©');
    } else {
      console.log('   - ‚ùå Erreur: Token expir√© accept√©');
    }
    
    console.log('\n4Ô∏è‚É£ Test de changement de mot de passe pour utilisateur connect√©');
    
    // Se connecter d'abord
    await AuthService.login(testEmail, 'nouveau123');
    console.log('   - Utilisateur connect√©');
    
    // Changer le mot de passe
    try {
      await AuthService.changePassword('nouveau123', 'encoreplusnouveau123');
      console.log('   - ‚úÖ Mot de passe chang√© avec succ√®s');
      
      // V√©rifier que le nouveau mot de passe fonctionne
      await AuthService.logout();
      await AuthService.login(testEmail, 'encoreplusnouveau123');
      console.log('   - ‚úÖ Connexion r√©ussie avec le mot de passe chang√©');
    } catch (error) {
      console.log(`   - ‚ùå Erreur lors du changement: ${error.message}`);
    }
    
    console.log('\nüéâ Tests termin√©s avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
};

// Ex√©cuter les tests
testPasswordReset(); 
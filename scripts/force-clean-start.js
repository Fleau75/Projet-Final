/**
 * Script pour forcer un nettoyage complet au d√©marrage
 * Supprime toutes les donn√©es d'authentification pour forcer la page de connexion
 */

import AsyncStorage from '@react-native-async-storage/async-storage';

export const forceCleanStart = async () => {
  try {
    console.log('üßπ FOR√áAGE DU NETTOYAGE COMPLET AU D√âMARRAGE...');
    
    // Supprimer TOUTES les donn√©es d'authentification
    const authKeys = [
      'userProfile',
      'isAuthenticated', 
      'currentUser',
      'userPassword'
    ];
    
    await AsyncStorage.multiRemove(authKeys);
    console.log('üóëÔ∏è Donn√©es d\'authentification supprim√©es');
    
    // Supprimer aussi tous les utilisateurs de test
    const allKeys = await AsyncStorage.getAllKeys();
    const testUserKeys = allKeys.filter(key => 
      key.startsWith('user_') && 
      (key.includes('test@') || key.includes('demo@') || key.includes('admin@') || key.includes('visiteur@'))
    );
    
    if (testUserKeys.length > 0) {
      await AsyncStorage.multiRemove(testUserKeys);
      console.log(`üóëÔ∏è ${testUserKeys.length} utilisateurs de test supprim√©s`);
    }
    
    // V√©rifier que tout est bien supprim√©
    const remainingAuth = await AsyncStorage.getItem('isAuthenticated');
    const remainingProfile = await AsyncStorage.getItem('userProfile');
    
    if (!remainingAuth && !remainingProfile) {
      console.log('‚úÖ Nettoyage complet r√©ussi - L\'utilisateur arrivera sur la page de connexion');
      return true;
    } else {
      console.log('‚ö†Ô∏è Donn√©es r√©siduelles d√©tect√©es');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage forc√©:', error);
    return false;
  }
};

// Fonction pour v√©rifier si le nettoyage est n√©cessaire
export const shouldForceCleanStart = async () => {
  try {
    const isAuth = await AsyncStorage.getItem('isAuthenticated');
    const userProfile = await AsyncStorage.getItem('userProfile');
    
    // Si il y a des donn√©es d'auth mais pas de profil valide, nettoyer
    if (isAuth === 'true' && (!userProfile || userProfile === 'null')) {
      console.log('üîç D√©tection de donn√©es d\'auth corrompues - nettoyage n√©cessaire');
      return true;
    }
    
    // Si il y a un profil mais pas d'auth, nettoyer
    if (isAuth !== 'true' && userProfile) {
      console.log('üîç D√©tection de profil sans auth - nettoyage n√©cessaire');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    return true; // En cas d'erreur, on nettoie par pr√©caution
  }
}; 
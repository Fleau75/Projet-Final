import AsyncStorage from '@react-native-async-storage/async-storage';
import CryptoService from './cryptoService';
import StorageService from './storageService';
import { BiometricService } from './biometricService';

// Utilisateurs de test pr√©-cr√©√©s
const TEST_USERS = {
  'test@example.com': {
    email: 'test@example.com',
    password: '123456',
    name: 'Utilisateur Test',
    createdAt: new Date().toISOString(),
    reviewsAdded: 5, // D√©j√† 5 avis ajout√©s pour tester le badge
    isVerified: true
  },
  'demo@accessplus.com': {
    email: 'demo@accessplus.com',
    password: 'demo123',
    name: 'D√©mo AccessPlus',
    createdAt: new Date().toISOString(),
    reviewsAdded: 8,
    isVerified: true
  },
  'admin@accessplus.com': {
    email: 'admin@accessplus.com',
    password: 'admin123',
    name: 'Administrateur',
    createdAt: new Date().toISOString(),
    reviewsAdded: 12,
    isVerified: true
  }
};

// Initialiser les utilisateurs de test au d√©marrage
const initializeTestUsers = async () => {
  try {
    for (const [email, userData] of Object.entries(TEST_USERS)) {
      const userKey = `user_${email}`;
      const existingUser = await AsyncStorage.getItem(userKey);
      
      if (!existingUser) {
        await AsyncStorage.setItem(userKey, JSON.stringify(userData));
        console.log(`‚úÖ Utilisateur de test cr√©√©: ${email}`);
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des utilisateurs de test:', error);
  }
};

// Appeler l'initialisation au chargement du module
initializeTestUsers();

/**
 * Service d'authentification simplifi√© pour Expo
 * Utilise AsyncStorage pour simuler l'authentification
 */
export class AuthService {
  
  /**
   * Initialiser le service d'authentification
   * Migre automatiquement les donn√©es existantes vers le chiffrement
   */
  static async initialize() {
    try {
      console.log('üîê Initialisation du service d\'authentification s√©curis√©...');
      await CryptoService.migrateToEncryption();
      console.log('‚úÖ Service d\'authentification initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation:', error);
    }
  }

  /**
   * Inscription d'un nouvel utilisateur
   */
  static async register(email, password, userData) {
    try {
      console.log('üîß AuthService.register - D√©but avec:', { email, userData });
      
      // V√©rifier si c'est un compte visiteur
      const isVisitor = email === 'visiteur@accessplus.com';
      console.log('üîß Compte visiteur:', isVisitor);
      
      // Pour le visiteur, on √©crase toujours le profil existant
      if (isVisitor) {
        console.log('üîß Nettoyage du profil visiteur existant');
        await AsyncStorage.removeItem('userProfile');
        await AsyncStorage.removeItem('isAuthenticated');
        await AsyncStorage.removeItem('currentUser');
        await AsyncStorage.removeItem('userPassword');
      } else {
        // Pour les autres utilisateurs, v√©rifier si l'email existe d√©j√†
        // V√©rifier dans les utilisateurs de test
        const testUserKey = `user_${email}`;
        const existingTestUser = await AsyncStorage.getItem(testUserKey);
        
        // V√©rifier dans le profil normal (utiliser AsyncStorage directement)
        const existingProfileKey = `user_${email}_userProfile`;
        const existingProfile = await AsyncStorage.getItem(existingProfileKey);
        
        console.log('üîß Utilisateur de test existant:', existingTestUser ? 'Oui' : 'Non');
        console.log('üîß Profil normal existant:', existingProfile ? 'Oui' : 'Non');
        
        if (existingTestUser || existingProfile) {
          throw new Error('Cette adresse email est d√©j√† utilis√©e');
        }
        
        // MIGRATION DES DONN√âES VISITEUR AVANT LE NETTOYAGE
        // V√©rifier si l'utilisateur veut migrer ses donn√©es
        const shouldMigrate = userData.migrateVisitorData !== false; // Par d√©faut true, sauf si explicitement false
        console.log('üîÑ Option de migration des donn√©es visiteur:', shouldMigrate);
        
        if (shouldMigrate) {
          console.log('üîÑ V√©rification des donn√©es visiteur pour migration...');
          try {
            const visitorDataResult = await StorageService.getAllUserData('visitor');
            
            // V√©rifier si la r√©cup√©ration des donn√©es a r√©ussi
            if (visitorDataResult.success && visitorDataResult.data && Object.keys(visitorDataResult.data).length > 0) {
              console.log('‚úÖ Donn√©es visiteur trouv√©es, migration automatique...');
              try {
                const migrationResult = await StorageService.migrateVisitorDataToUser(userData.email, true);
                console.log('üìä R√©sultat migration automatique:', migrationResult);
                
                // Afficher un message de confirmation si la migration a r√©ussi
                if (migrationResult && migrationResult.migrated) {
                  console.log('‚úÖ Migration r√©ussie avec succ√®s');
                } else if (migrationResult && migrationResult.error) {
                  console.warn('‚ö†Ô∏è Migration partiellement √©chou√©e:', migrationResult.error);
                }
              } catch (migrationError) {
                console.warn('‚ö†Ô∏è Erreur migration automatique (non critique):', migrationError);
                // Ne pas faire √©chouer l'inscription si la migration √©choue
              }
            } else {
              console.log('‚ùå Aucune donn√©e visiteur √† migrer');
            }
          } catch (visitorDataError) {
            console.warn('‚ö†Ô∏è Erreur lors de la v√©rification des donn√©es visiteur (non critique):', visitorDataError);
            // Ne pas faire √©chouer l'inscription si la v√©rification √©choue
          }
        } else {
          console.log('‚ùå Migration des donn√©es visiteur d√©sactiv√©e par l\'utilisateur');
          // Si l'utilisateur ne veut pas migrer, nettoyer quand m√™me les donn√©es visiteur
          try {
            console.log('üßπ Nettoyage des donn√©es visiteur (migration refus√©e)...');
            await StorageService.clearUserData('visitor');
            
            // Nettoyer aussi les donn√©es globales
            const globalKeysToRemove = [
              'userProfile',
              'isAuthenticated', 
              'currentUser',
              'userPassword',
              'favorites',
              'mapMarkers',
              'accessibilityPrefs',
              'notifications',
              'searchRadius',
              'mapStyle',
              'biometricPreferences',
              'pushToken',
              'history',
              'settings'
            ];
            
            for (const key of globalKeysToRemove) {
              try {
                await AsyncStorage.removeItem(key);
                console.log(`üóëÔ∏è Cl√© globale supprim√©e: ${key}`);
              } catch (error) {
                console.warn(`‚ö†Ô∏è Erreur lors de la suppression de ${key} (non critique):`, error);
              }
            }
            
            // Nettoyer aussi les avis Firebase du visiteur
            try {
              console.log('üßπ Nettoyage des avis Firebase du visiteur...');
              const { ReviewsService } = await import('./firebaseService');
              const visitorReviews = await ReviewsService.getReviewsByUserId('visiteur@accessplus.com', 'visiteur@accessplus.com');
              console.log(`üìù ${visitorReviews.length} avis visiteur trouv√©s √† supprimer`);
              
              if (visitorReviews.length > 0) {
                for (const review of visitorReviews) {
                  try {
                    console.log(`üóëÔ∏è Suppression de l'avis: ${review.placeName} (${review.id})`);
                    await ReviewsService.deleteReview(review.id);
                  } catch (reviewError) {
                    console.warn(`‚ö†Ô∏è Erreur lors de la suppression de l'avis ${review.id} (non critique):`, reviewError);
                  }
                }
                console.log(`‚úÖ ${visitorReviews.length} avis visiteur supprim√©s`);
              }
            } catch (firebaseError) {
              console.warn('‚ö†Ô∏è Erreur lors du nettoyage des avis Firebase (non critique):', firebaseError);
            }
            
            console.log('‚úÖ Nettoyage des donn√©es visiteur termin√©');
          } catch (cleanupError) {
            console.warn('‚ö†Ô∏è Erreur lors du nettoyage (non critique):', cleanupError);
          }
        }
        
        // NETTOYER LE PROFIL VISITEUR SI IL EXISTE
        console.log('üßπ Nettoyage du profil visiteur pour le nouveau compte...');
        try {
          await AsyncStorage.removeItem('userProfile');
          await AsyncStorage.removeItem('isAuthenticated');
          await AsyncStorage.removeItem('currentUser');
          await AsyncStorage.removeItem('userPassword');
          console.log('‚úÖ Profil visiteur nettoy√©');
        } catch (profileCleanupError) {
          console.warn('‚ö†Ô∏è Erreur lors du nettoyage du profil visiteur (non critique):', profileCleanupError);
        }
      }

      // Simuler la cr√©ation d'un utilisateur
      const user = {
        uid: `user_${Date.now()}`,
        email: userData.email,
        displayName: `${userData.firstName} ${userData.lastName}`
      };
      console.log('üîß Utilisateur cr√©√©:', user);

      // Sauvegarder les donn√©es utilisateur dans le format normal
      const userProfile = {
        uid: user.uid,
        name: `${userData.firstName} ${userData.lastName}`,
        email: userData.email,
        phone: userData.phone || '',
        joinDate: new Date().toLocaleDateString('fr-FR', { 
          year: 'numeric', 
          month: 'long' 
        }),
        isVisitor: isVisitor
      };
      console.log('üîß Profil utilisateur √† sauvegarder:', userProfile);

      // Sauvegarder dans le stockage priv√© avec StorageService
      await StorageService.setUserData('userProfile', userProfile, userData.email);
      await StorageService.setUserData('userPassword', password, userData.email);
      await StorageService.setUserData('isAuthenticated', 'true', userData.email);
      await StorageService.setUserData('currentUser', user, userData.email);

      // AUSSI sauvegarder directement avec AsyncStorage pour la compatibilit√©
      await AsyncStorage.setItem(`user_${userData.email}_userProfile`, JSON.stringify(userProfile));
      await AsyncStorage.setItem(`user_${userData.email}_userPassword`, password);
      await AsyncStorage.setItem(`user_${userData.email}_isAuthenticated`, 'true');
      await AsyncStorage.setItem(`user_${userData.email}_currentUser`, JSON.stringify(user));
      console.log('üîß Donn√©es sauvegard√©es directement avec AsyncStorage');

      // AUSSI sauvegarder dans le format des utilisateurs de test pour la compatibilit√©
      if (!isVisitor) {
        const testUserData = {
          email: userData.email,
          password: password, // Inclure le mot de passe pour la compatibilit√©
          name: `${userData.firstName} ${userData.lastName}`,
          createdAt: new Date().toISOString()
        };
        const testUserKey = `user_${email}`;
        await AsyncStorage.setItem(testUserKey, JSON.stringify(testUserData));
        console.log('üîß Utilisateur sauvegard√© aussi au format test:', testUserKey);
      }

      // Pour le visiteur, sauvegarder aussi dans le stockage global
      if (isVisitor) {
        await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
        await AsyncStorage.setItem('isAuthenticated', 'true');
        await AsyncStorage.setItem('userPassword', password);
        console.log('üîß Donn√©es visiteur sauvegard√©es dans le stockage global');
      } else {
        // Pour les utilisateurs normaux, sauvegarder aussi dans le stockage global
        // pour que getCurrentUser() puisse les trouver
        await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
        await AsyncStorage.setItem('isAuthenticated', 'true');
        await AsyncStorage.setItem('userPassword', password);
        await AsyncStorage.setItem('currentUser', JSON.stringify(user));
        console.log('üîß Donn√©es utilisateur sauvegard√©es dans le stockage global');
      }

      console.log('üîß Donn√©es sauvegard√©es avec succ√®s');
      console.log('üîß V√©rification finale - getCurrentUser():', await this.getCurrentUser());
      return { success: true, user };
    } catch (error) {
      // console.error('‚ùå Erreur lors de l\'inscription:', error); // Comment√© pour emp√™cher le toast d'erreur
      throw error;
    }
  }

  /**
   * Connexion de l'utilisateur
   */
  static async login(email, password) {
    try {
      // console.log('üîç Tentative de connexion pour:', email);
      
      // Cas sp√©cial pour le visiteur
      if (email === 'visiteur@accessplus.com') {
        // console.log('üîç Connexion visiteur d√©tect√©e');
        
        // V√©rifier le mot de passe du visiteur (peut √™tre stock√© directement ou chiffr√©)
        const visitorPasswordKey = `user_${email}_userPassword`;
        let storedPassword = await AsyncStorage.getItem(visitorPasswordKey);
        
        // Si le mot de passe est chiffr√©, le d√©chiffrer
        if (storedPassword && storedPassword.startsWith('U2F')) {
          const CryptoService = require('./cryptoService').default;
          storedPassword = CryptoService.decrypt(storedPassword);
        }
        
        if (storedPassword === password) {
          console.log('‚úÖ Connexion visiteur r√©ussie');
          
          // Cr√©er le profil visiteur
          const userProfile = {
            uid: `user_${Date.now()}`,
            name: 'Visiteur AccessPlus',
            email: 'visiteur@accessplus.com',
            phone: '',
            joinDate: new Date().toLocaleDateString('fr-FR', { 
              year: 'numeric', 
              month: 'long' 
            }),
            isVisitor: true
          };
          
          // Sauvegarder dans le stockage global pour le visiteur
          await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
          await AsyncStorage.setItem('isAuthenticated', 'true');
          
          return { success: true };
        }
      }
      
      // V√©rifier d'abord les utilisateurs de test (stockage direct)
      const testUserKey = `user_${email}`;
      const testUser = await AsyncStorage.getItem(testUserKey);
      
      if (testUser) {
        console.log('üîç Utilisateur de test trouv√©');
        const userData = JSON.parse(testUser);
        
        // V√©rifier si le mot de passe est chiffr√©
        let storedPassword = userData.password;
        if (storedPassword && storedPassword.startsWith('U2F')) {
          console.log('üîç Mot de passe chiffr√© d√©tect√©, d√©chiffrement...');
          const CryptoService = require('./cryptoService').default;
          storedPassword = CryptoService.decrypt(storedPassword);
          console.log('üîç Mot de passe d√©chiffr√©:', storedPassword);
        }
        
        if (storedPassword === password) {
          console.log('‚úÖ Connexion r√©ussie avec utilisateur de test');
          
          // Sauvegarder les donn√©es d'authentification dans le stockage priv√©
          const userProfile = {
            email: userData.email,
            name: userData.name,
            uid: userData.uid || `test_${Date.now()}`,
            isVisitor: false,
            createdAt: new Date().toISOString()
          };
          
          // Utiliser StorageService pour tout le stockage priv√©
          await StorageService.setUserData('userProfile', userProfile, email);
          await StorageService.setUserData('isAuthenticated', 'true', email);
          await StorageService.setUserData('userPassword', password, email);
          
          // Sauvegarder aussi dans le stockage global pour compatibilit√©
          await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
          await AsyncStorage.setItem('isAuthenticated', 'true');
          
          return { success: true };
        }
      }
      
      // Si pas d'utilisateur de test, v√©rifier les utilisateurs normaux
      // Utiliser le m√™me syst√®me de stockage pour les deux
      const storedPassword = await StorageService.getUserData('userPassword', null, email);
      const isAuthenticated = await StorageService.getUserData('isAuthenticated', null, email);
      
      console.log('üîç V√©rification utilisateur normal:', { email, storedPassword, isAuthenticated });
      
      if (isAuthenticated === 'true' && storedPassword === password) {
        console.log('‚úÖ Connexion r√©ussie avec utilisateur normal');
        
        // R√©cup√©rer le profil utilisateur
        const userProfile = await StorageService.getUserData('userProfile', null, email);
        
        // Sauvegarder aussi dans le stockage global pour compatibilit√©
        if (userProfile) {
          await AsyncStorage.setItem('userProfile', JSON.stringify(userProfile));
          await AsyncStorage.setItem('isAuthenticated', 'true');
        }
        
        return { success: true };
      }
      
      // Si on arrive ici, essayer de v√©rifier avec AsyncStorage directement
      console.log('üîç Tentative de v√©rification directe avec AsyncStorage...');
      const directPassword = await AsyncStorage.getItem(`user_${email}_userPassword`);
      const directAuth = await AsyncStorage.getItem(`user_${email}_isAuthenticated`);
      
      console.log('üîç V√©rification directe:', { email, directPassword, directAuth });
      
      // V√©rifier si le mot de passe direct est chiffr√©
      let decryptedDirectPassword = directPassword;
      if (directPassword && directPassword.startsWith('U2F')) {
        console.log('üîç Mot de passe direct chiffr√© d√©tect√©, d√©chiffrement...');
        const CryptoService = require('./cryptoService').default;
        decryptedDirectPassword = CryptoService.decrypt(directPassword);
        console.log('üîç Mot de passe direct d√©chiffr√©:', decryptedDirectPassword);
      }
      
      if (directAuth === 'true' && decryptedDirectPassword === password) {
        console.log('‚úÖ Connexion r√©ussie avec v√©rification directe');
        
        // R√©cup√©rer le profil utilisateur
        const userProfile = await AsyncStorage.getItem(`user_${email}_userProfile`);
        if (userProfile) {
          await AsyncStorage.setItem('userProfile', userProfile);
          await AsyncStorage.setItem('isAuthenticated', 'true');
        }
        
        return { success: true };
      }
      
      console.log('‚ùå Email ou mot de passe incorrect');
      throw new Error('Email ou mot de passe incorrect');
      
    } catch (error) {
      // Ne pas afficher l'erreur dans la console pour √©viter le bandeau
      // console.error('‚ùå Erreur lors de la connexion:', error);
      throw error;
    }
  }

  /**
   * D√©connexion de l'utilisateur
   */
  static async logout() {
    try {
      console.log('üîì D√©but de la d√©connexion...');
      
      // R√©cup√©rer l'utilisateur actuel pour savoir quelles donn√©es supprimer
      const currentUser = await this.getCurrentUser();
      const currentEmail = currentUser?.email;
      
      console.log('üîì Utilisateur √† d√©connecter:', currentEmail);
      
      // Supprimer les cl√©s de session de mani√®re s√©curis√©e
      const keysToRemove = [
        'userProfile',
        'isAuthenticated', 
        'currentUser',
        'userPassword'
      ];
      
      // Supprimer avec StorageService
      for (const key of keysToRemove) {
        try {
          await StorageService.removeUserData(key);
          console.log(`‚úÖ Cl√© supprim√©e (StorageService): ${key}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la suppression de ${key}:`, error);
        }
      }
      
      // Supprimer aussi les donn√©es stock√©es directement avec AsyncStorage
      if (currentEmail && currentEmail !== 'visiteur@accessplus.com') {
        const directKeysToRemove = [
          `user_${currentEmail}_userProfile`,
          `user_${currentEmail}_userPassword`,
          `user_${currentEmail}_isAuthenticated`,
          `user_${currentEmail}_currentUser`
        ];
        
        for (const key of directKeysToRemove) {
        try {
          await AsyncStorage.removeItem(key);
            console.log(`‚úÖ Cl√© supprim√©e (AsyncStorage): ${key}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la suppression de ${key}:`, error);
          }
        }
      }
      
      // Supprimer les cl√©s globales
      const globalKeysToRemove = [
        'userProfile',
        'isAuthenticated',
        'currentUser',
        'userPassword'
      ];
      
      for (const key of globalKeysToRemove) {
        try {
          await AsyncStorage.removeItem(key);
          console.log(`‚úÖ Cl√© globale supprim√©e: ${key}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è Erreur lors de la suppression de la cl√© globale ${key}:`, error);
        }
      }
      
      console.log('‚úÖ D√©connexion r√©ussie');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©connexion:', error);
      // Retourner un succ√®s m√™me en cas d'erreur pour √©viter les crashs
      return { success: true };
    }
  }

  /**
   * V√©rifier si l'utilisateur est connect√©
   */
  static async isAuthenticated() {
    try {
      // Essayer de r√©cup√©rer l'utilisateur depuis les pr√©f√©rences biom√©triques
      const biometricPrefs = await BiometricService.loadBiometricPreferences();
      if (biometricPrefs && biometricPrefs.enabled && biometricPrefs.email) {
        const isAuth = await StorageService.getUserData('isAuthenticated', null, biometricPrefs.email);
        if (isAuth === 'true') {
          console.log('üîß Utilisateur authentifi√© via biom√©trie:', biometricPrefs.email);
          return true;
        }
      }
      
      // Fallback : utiliser directement AsyncStorage pour les cl√©s d'authentification
      const isAuth = await AsyncStorage.getItem('isAuthenticated');
      const userProfile = await AsyncStorage.getItem('userProfile');
      
      // V√©rifier que l'utilisateur est authentifi√© ET qu'un profil existe
      if (isAuth === 'true' && userProfile) {
        try {
        const profile = JSON.parse(userProfile);
        // V√©rifier que ce n'est pas un profil vide ou invalide
        if (profile && profile.email && profile.name) {
          console.log('üîß Utilisateur authentifi√©:', profile.email);
          return true;
          }
        } catch (parseError) {
          console.error('Erreur lors du parsing du profil:', parseError);
        }
      }
      
      console.log('üîß Aucun utilisateur authentifi√© trouv√©');
      return false;
    } catch (error) {
      console.error('Erreur lors de la v√©rification d\'authentification:', error);
      return false;
    }
  }

  /**
   * Obtenir l'utilisateur actuel
   */
  static async getCurrentUser() {
    try {
      // Essayer de r√©cup√©rer l'utilisateur depuis les pr√©f√©rences biom√©triques
      const biometricPrefs = await BiometricService.loadBiometricPreferences();
      if (biometricPrefs && biometricPrefs.enabled && biometricPrefs.email) {
        const userProfile = await StorageService.getUserData('userProfile', null, biometricPrefs.email);
        if (userProfile && userProfile.email && userProfile.name) {
          console.log('üîß Utilisateur r√©cup√©r√© via biom√©trie:', userProfile.email);
          return userProfile;
        }
      }
      
      // Fallback : utiliser directement AsyncStorage pour les cl√©s d'authentification
      const isAuth = await AsyncStorage.getItem('isAuthenticated');
      if (isAuth === 'true') {
        const userProfile = await AsyncStorage.getItem('userProfile');
        if (userProfile) {
          try {
          const profile = JSON.parse(userProfile);
          if (profile && profile.email && profile.name) {
            return profile;
            }
          } catch (parseError) {
            console.error('Erreur lors du parsing du profil:', parseError);
          }
        }
      }
      return null;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
      return null;
    }
  }

  /**
   * V√©rifier si l'utilisateur actuel est un visiteur
   */
  static async isCurrentUserVisitor() {
    try {
      // Utiliser directement AsyncStorage pour les cl√©s d'authentification
      const userProfile = await AsyncStorage.getItem('userProfile');
      if (userProfile) {
        try {
        const profile = JSON.parse(userProfile);
        return profile && profile.isVisitor === true;
        } catch (parseError) {
          console.error('Erreur lors du parsing du profil:', parseError);
        }
      }
      return false;
    } catch (error) {
      console.error('Erreur lors de la v√©rification du statut visiteur:', error);
      return false;
    }
  }

  /**
   * √âcouter les changements d'√©tat d'authentification
   */
  static onAuthStateChange(callback) {
    // Pour Expo, on simule un listener simple
    // En production, vous pourriez utiliser un EventEmitter
    return () => {}; // Cleanup function
  }

  /**
   * Obtenir le message d'erreur en fran√ßais
   */
  static getErrorMessage(error) {
    if (error.message) {
      return error.message;
    }
    
    switch (error.code) {
      case 'auth/email-already-in-use':
        return 'Cette adresse email est d√©j√† utilis√©e';
      case 'auth/invalid-email':
        return 'Adresse email invalide';
      case 'auth/weak-password':
        return 'Le mot de passe doit contenir au moins 6 caract√®res';
      case 'auth/user-not-found':
        return 'Aucun compte trouv√© avec cette adresse email';
      case 'auth/wrong-password':
        return 'Mot de passe incorrect';
      case 'auth/too-many-requests':
        return 'Trop de tentatives. Veuillez r√©essayer plus tard';
      case 'auth/network-request-failed':
        return 'Erreur de connexion. V√©rifiez votre connexion internet';
      default:
        return 'Une erreur est survenue. Veuillez r√©essayer';
    }
  }

  /**
   * V√©rifier si un utilisateur existe
   */
  static async checkUserExists(email) {
    try {
      console.log('üîç V√©rification de l\'existence de l\'utilisateur:', email);
      
      // V√©rifier dans les utilisateurs de test
      const testUserKey = `user_${email}`;
      const testUser = await AsyncStorage.getItem(testUserKey);
      
      if (testUser) {
        console.log('‚úÖ Utilisateur de test trouv√©');
        return true;
      }
      
      // V√©rifier dans le profil normal (utiliser AsyncStorage directement)
      const existingProfileKey = `user_${email}_userProfile`;
      const existingProfile = await AsyncStorage.getItem(existingProfileKey);
      
      if (existingProfile) {
          console.log('‚úÖ Utilisateur normal trouv√©');
          return true;
      }
      
      // V√©rifier aussi dans le stockage global (pour les utilisateurs connect√©s)
      const globalProfile = await AsyncStorage.getItem('userProfile');
      if (globalProfile) {
        try {
          const profile = JSON.parse(globalProfile);
          if (profile.email === email) {
            console.log('‚úÖ Utilisateur trouv√© dans le stockage global');
            return true;
          }
        } catch (parseError) {
          console.log('‚ùå Erreur parsing profil global:', parseError);
        }
      }
      
      console.log('‚ùå Aucun utilisateur trouv√© avec cet email');
      return false;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de l\'utilisateur:', error);
      return false;
    }
  }

  /**
   * Envoyer un email de r√©initialisation de mot de passe
   */
  static async sendPasswordResetEmail(email) {
    try {
      console.log('üìß Envoi d\'email de r√©initialisation pour:', email);
      
      // Simuler l'envoi d'email (en production, ceci utiliserait un vrai service d'email)
      const resetToken = `reset_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const expiresAt = Date.now() + (60 * 60 * 1000); // 1 heure
      
      // Sauvegarder le token de r√©initialisation
      const resetData = {
        email,
        token: resetToken,
        expiresAt,
        createdAt: new Date().toISOString()
      };
      
      await StorageService.setUserData(`resetToken_${email}`, resetData);
      
      console.log('‚úÖ Token de r√©initialisation cr√©√©:', resetToken);
      console.log('üìß Email de r√©initialisation "envoy√©" (simul√©)');
      
      // En production, vous enverriez un vrai email ici
      // avec un lien contenant le token
      
      return { success: true, resetToken };
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi de l\'email de r√©initialisation:', error);
      throw new Error('Impossible d\'envoyer l\'email de r√©initialisation');
    }
  }

  /**
   * V√©rifier si un token de r√©initialisation est valide
   */
  static async verifyResetToken(email) {
    try {
      console.log('üîç V√©rification du token de r√©initialisation pour:', email);
      
      const resetDataKey = `resetToken_${email}`;
      const resetData = await StorageService.getUserData(resetDataKey);
      
      if (!resetData) {
        console.log('‚ùå Aucun token de r√©initialisation trouv√©');
        return false;
      }
      
      const { token, expiresAt } = resetData;
      
      // V√©rifier si le token a expir√©
      if (Date.now() > expiresAt) {
        console.log('‚ùå Token de r√©initialisation expir√©');
        await StorageService.removeUserData(resetDataKey);
        return false;
      }
      
      console.log('‚úÖ Token de r√©initialisation valide');
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du token:', error);
      return false;
    }
  }

  /**
   * Mettre √† jour le mot de passe d'un utilisateur
   */
  static async updatePassword(email, newPassword) {
    try {
      console.log('üîß Mise √† jour du mot de passe pour:', email);
      
      // V√©rifier que le token est toujours valide
      const isValidToken = await this.verifyResetToken(email);
      if (!isValidToken) {
        throw new Error('Token de r√©initialisation invalide ou expir√©');
      }
      
      // Mettre √† jour le mot de passe selon le type d'utilisateur
      const testUserKey = `user_${email}`;
      const testUser = await AsyncStorage.getItem(testUserKey);
      
      if (testUser) {
        // Utilisateur de test
        const userData = JSON.parse(testUser);
        userData.password = newPassword;
        await AsyncStorage.setItem(testUserKey, JSON.stringify(userData));
        console.log('‚úÖ Mot de passe mis √† jour pour l\'utilisateur de test');
      } else {
        // Utilisateur normal
        const userProfile = await AsyncStorage.getItem('userProfile');
        if (userProfile) {
          const profile = JSON.parse(userProfile);
          if (profile.email === email) {
            await AsyncStorage.setItem('userPassword', newPassword);
            console.log('‚úÖ Mot de passe mis √† jour pour l\'utilisateur normal');
          } else {
            throw new Error('Utilisateur non trouv√©');
          }
        } else {
          throw new Error('Utilisateur non trouv√©');
        }
      }
      
      // Supprimer le token de r√©initialisation
      await AsyncStorage.removeItem(`resetToken_${email}`);
      
      console.log('‚úÖ Mot de passe mis √† jour avec succ√®s');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du mot de passe:', error);
      throw error;
    }
  }

  /**
   * Changer le mot de passe d'un utilisateur connect√©
   */
  static async changePassword(currentPassword, newPassword) {
    try {
      console.log('üîß Changement de mot de passe pour l\'utilisateur connect√©');
      
      // R√©cup√©rer l'utilisateur actuel
      const currentUser = await this.getCurrentUser();
      if (!currentUser) {
        throw new Error('Aucun utilisateur connect√©');
      }
      
      console.log('üîç Utilisateur connect√©:', currentUser.email);
      
      // V√©rifier l'ancien mot de passe en essayant de se connecter avec
      console.log('üîç V√©rification du mot de passe par connexion...');
      let isPasswordCorrect = false;
      
      try {
        // Essayer de se connecter avec le mot de passe fourni
        await this.login(currentUser.email, currentPassword);
        console.log('‚úÖ Mot de passe v√©rifi√© par connexion r√©ussie');
        isPasswordCorrect = true;
      } catch (loginError) {
        console.log('‚ùå √âchec de v√©rification par connexion:', loginError.message);
        isPasswordCorrect = false;
      }
      
      if (!isPasswordCorrect) {
        throw new Error('Mot de passe actuel incorrect');
      }
      
      // Maintenant mettre √† jour le mot de passe selon le type d'utilisateur
      const testUserKey = `user_${currentUser.email}`;
      const testUser = await AsyncStorage.getItem(testUserKey);
      
      if (testUser) {
        // Utilisateur de test
        const userData = JSON.parse(testUser);
        userData.password = CryptoService.encrypt(newPassword); // Chiffrer le nouveau mot de passe
        await AsyncStorage.setItem(testUserKey, JSON.stringify(userData));
        console.log('‚úÖ Mot de passe mis √† jour pour l\'utilisateur de test');
      } else {
        // Utilisateur normal
        await CryptoService.setEncryptedItem('userPassword', newPassword);
        console.log('‚úÖ Mot de passe mis √† jour pour l\'utilisateur normal');
      }
      
      console.log('‚úÖ Mot de passe chang√© avec succ√®s');
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur lors du changement de mot de passe:', error);
      throw error;
    }
  }

  /**
   * V√©rifier si un utilisateur m√©rite le badge v√©rifi√©
   * Crit√®res : Compte cr√©√© + minimum 3 avis/commentaires ajout√©s
   */
  static async checkVerificationStatus(userId) {
    try {
      // R√©cup√©rer l'utilisateur actuel pour obtenir l'email
      const currentUser = await this.getCurrentUser();
      const userEmail = currentUser ? currentUser.email : null;
      
      if (!userEmail) {
        console.log('‚ùå Aucun utilisateur connect√© pour v√©rification');
        return { isVerified: false, criteria: {} };
      }
      
      // R√©cup√©rer les statistiques de l'utilisateur par email
      const userStats = await this.getUserStatsByEmail(userEmail);
      
      // Crit√®res pour le badge v√©rifi√©
      const hasAccount = !userStats.isVisitor;
      const hasEnoughReviews = userStats.reviewsAdded >= 3;
      
      const isVerified = hasAccount && hasEnoughReviews;
      
      console.log(`üîç Statut de v√©rification: ${JSON.stringify({
        criteria: {
          hasAccount,
          hasEnoughReviews,
          reviewsAdded: userStats.reviewsAdded,
          requiredReviews: 3
        },
        isVerified,
        verifiedAt: isVerified ? new Date().toISOString() : null
      })}`);
      
      // Sauvegarder le statut de v√©rification par email
      await this.updateUserVerificationStatusByEmail(userEmail, isVerified);
      
      return {
        isVerified,
        criteria: {
          hasAccount,
          hasEnoughReviews,
          reviewsAdded: userStats.reviewsAdded,
          requiredReviews: 3
        },
        verifiedAt: isVerified ? new Date().toISOString() : null
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification du statut:', error);
      return { isVerified: false, criteria: {} };
    }
  }

  /**
   * R√©cup√©rer les statistiques d'un utilisateur par email
   */
  static async getUserStatsByEmail(userEmail) {
    try {
      const statsKey = `userStats_email_${userEmail}`;
      const savedStats = await AsyncStorage.getItem(statsKey);
      
      if (savedStats) {
        return JSON.parse(savedStats);
      }
      
      // Statistiques par d√©faut
      const defaultStats = {
        placesAdded: 0,
        reviewsAdded: 0,
        isVisitor: false,
        joinDate: new Date().toISOString(),
        lastActivity: new Date().toISOString()
      };
      
      await AsyncStorage.setItem(statsKey, JSON.stringify(defaultStats));
      return defaultStats;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des stats:', error);
      return {
        placesAdded: 0,
        reviewsAdded: 0,
        isVisitor: false,
        joinDate: new Date().toISOString(),
        lastActivity: new Date().toISOString()
      };
    }
  }

  /**
   * R√©cup√©rer les statistiques d'un utilisateur (compatibilit√©)
   */
  static async getUserStats(userId) {
    try {
      // Essayer d'abord par email si c'est un email
      if (userId.includes('@')) {
        return await this.getUserStatsByEmail(userId);
      }
      
      // Sinon, essayer par UID
      const statsKey = `userStats_${userId}`;
      const savedStats = await AsyncStorage.getItem(statsKey);
      
      if (savedStats) {
        return JSON.parse(savedStats);
      }
      
      // Statistiques par d√©faut
      const defaultStats = {
        placesAdded: 0,
        reviewsAdded: 0,
        isVisitor: false,
        joinDate: new Date().toISOString(),
        lastActivity: new Date().toISOString()
      };
      
      await AsyncStorage.setItem(statsKey, JSON.stringify(defaultStats));
      return defaultStats;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des stats:', error);
      return {
        placesAdded: 0,
        reviewsAdded: 0,
        isVisitor: false,
        joinDate: new Date().toISOString(),
        lastActivity: new Date().toISOString()
      };
    }
  }

  /**
   * Mettre √† jour le statut de v√©rification d'un utilisateur par email
   */
  static async updateUserVerificationStatusByEmail(userEmail, isVerified) {
    try {
      const verificationKey = `userVerification_email_${userEmail}`;
      
      // R√©cup√©rer les vraies statistiques pour les crit√®res
      const userStats = await this.getUserStatsByEmail(userEmail);
      const hasAccount = !userStats.isVisitor;
      const hasEnoughReviews = userStats.reviewsAdded >= 3;
      
      await AsyncStorage.setItem(verificationKey, JSON.stringify({
        isVerified,
        verifiedAt: isVerified ? new Date().toISOString() : null,
        criteria: {
          hasAccount,
          hasEnoughReviews,
          reviewsAdded: userStats.reviewsAdded,
          requiredReviews: 3
        }
      }));
      
      console.log(`‚úÖ Statut de v√©rification mis √† jour pour ${userEmail}: ${isVerified} (${userStats.reviewsAdded}/3 avis)`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du statut:', error);
    }
  }

  /**
   * Mettre √† jour le statut de v√©rification d'un utilisateur (compatibilit√©)
   */
  static async updateUserVerificationStatus(userId, isVerified) {
    try {
      // Essayer d'abord par email si c'est un email
      if (userId.includes('@')) {
        return await this.updateUserVerificationStatusByEmail(userId, isVerified);
      }
      
      const verificationKey = `userVerification_${userId}`;
      
      // R√©cup√©rer les vraies statistiques pour les crit√®res
      const userStats = await this.getUserStats(userId);
      const hasAccount = !userStats.isVisitor;
      const hasEnoughReviews = userStats.reviewsAdded >= 3;
      
      await AsyncStorage.setItem(verificationKey, JSON.stringify({
        isVerified,
        verifiedAt: isVerified ? new Date().toISOString() : null,
        criteria: {
          hasAccount,
          hasEnoughReviews,
          reviewsAdded: userStats.reviewsAdded,
          requiredReviews: 3
        }
      }));
      
      console.log(`‚úÖ Statut de v√©rification mis √† jour pour ${userId}: ${isVerified} (${userStats.reviewsAdded}/3 avis)`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du statut:', error);
    }
  }

  /**
   * Incr√©menter le compteur d'avis ajout√©s par un utilisateur
   */
  static async incrementReviewsAdded(userId) {
    try {
      // R√©cup√©rer l'utilisateur actuel pour obtenir l'email
      const currentUser = await this.getCurrentUser();
      const userEmail = currentUser ? currentUser.email : null;
      
      if (!userEmail) {
        console.log('‚ùå Aucun utilisateur connect√© pour incr√©menter les avis');
        return 0;
      }
      
      const stats = await this.getUserStatsByEmail(userEmail);
      stats.reviewsAdded += 1;
      stats.lastActivity = new Date().toISOString();
      
      const statsKey = `userStats_email_${userEmail}`;
      await AsyncStorage.setItem(statsKey, JSON.stringify(stats));
      
      // V√©rifier si l'utilisateur m√©rite maintenant le badge
      await this.checkVerificationStatus(userId);
      
      console.log(`‚úÖ Avis ajout√© pour ${userEmail}, total: ${stats.reviewsAdded}`);
      return stats.reviewsAdded;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'incr√©mentation des avis:', error);
      return 0;
    }
  }

  /**
   * R√©cup√©rer le statut de v√©rification d'un utilisateur
   */
  static async getUserVerificationStatus(userId) {
    try {
      // R√©cup√©rer l'utilisateur actuel pour obtenir l'email
      const currentUser = await this.getCurrentUser();
      const userEmail = currentUser ? currentUser.email : null;
      
      if (!userEmail) {
        console.log('‚ùå Aucun utilisateur connect√© pour r√©cup√©rer le statut');
        return { isVerified: false };
      }
      
      const verificationKey = `userVerification_email_${userEmail}`;
      const savedVerification = await AsyncStorage.getItem(verificationKey);
      
      if (savedVerification) {
        return JSON.parse(savedVerification);
      }
      
      // Si pas de statut sauvegard√©, le calculer
      return await this.checkVerificationStatus(userId);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du statut:', error);
      return { isVerified: false };
    }
  }

  /**
   * Supprimer compl√®tement un utilisateur et toutes ses donn√©es
   */
  static async deleteUser(email) {
    try {
      console.log('üóëÔ∏è Suppression compl√®te de l\'utilisateur:', email);
      
      // Supprimer les donn√©es de test
      const testUserKey = `user_${email}`;
      await AsyncStorage.removeItem(testUserKey);
      
      // Supprimer toutes les donn√©es priv√©es de l'utilisateur
      await StorageService.clearUserData(email);
      
      // Supprimer les cl√©s AsyncStorage directes
      const keysToRemove = [
        `user_${email}_userProfile`,
        `user_${email}_userPassword`,
        `user_${email}_isAuthenticated`,
        `user_${email}_currentUser`,
        `resetToken_${email}`
      ];
      
      await AsyncStorage.multiRemove(keysToRemove);
      
      console.log('‚úÖ Utilisateur supprim√© compl√®tement:', email);
      return { success: true };
    } catch (error) {
      console.error('‚ùå Erreur lors de la suppression de l\'utilisateur:', error);
      throw error;
    }
  }
} 
import AsyncStorage from '@react-native-async-storage/async-storage';
// const { AuthService } = require('./authService'); // d√©commenter si besoin

/**
 * Service de stockage priv√© pour chaque utilisateur/visiteur
 * Chaque utilisateur a son propre espace de stockage isol√©
 */
export class StorageService {
  
  /**
   * G√©n√®re une cl√© de stockage unique pour un utilisateur
   * @param {string} userId - ID de l'utilisateur ou 'visitor' pour les visiteurs
   * @param {string} key - Cl√© de la donn√©e
   * @returns {string} Cl√© de stockage unique
   */
  static getUserStorageKey(userId, key) {
    if (!userId) {
      throw new Error('userId est requis pour le stockage priv√©');
    }
    return `user_${userId}_${key}`;
  }

  /**
   * R√©cup√®re l'ID de l'utilisateur actuel
   * @returns {Promise<string>} ID de l'utilisateur ou 'visitor'
   */
  static async getCurrentUserId() {
    try {
      console.log('üîç StorageService.getCurrentUserId() - D√©but...');
      
      // Utiliser directement AsyncStorage pour les cl√©s d'authentification globales
      // car ces cl√©s ne sont pas encore migr√©es vers le syst√®me priv√©
      const isAuth = await AsyncStorage.getItem('isAuthenticated');
      console.log('üîç isAuthenticated:', isAuth);
      
      if (isAuth === 'true') {
        const userProfile = await AsyncStorage.getItem('userProfile');
        console.log('üîç userProfile brut:', userProfile);
        
        if (userProfile) {
          try {
            const profile = JSON.parse(userProfile);
            console.log('üîç profile pars√©:', profile);
            
            // Si c'est un visiteur, retourner 'visitor'
            if (profile.isVisitor) {
              console.log('üîç Utilisateur d√©tect√© comme visiteur');
              return 'visitor';
            }
            // Sinon retourner l'email comme ID unique
            const userId = profile.email || profile.uid;
            console.log('üîç ID utilisateur d√©termin√©:', userId);
            return userId;
          } catch (parseError) {
            console.error('Erreur lors du parsing du profil:', parseError);
            return 'visitor';
          }
        } else {
          console.log('üîç Aucun profil utilisateur trouv√©');
        }
      } else {
        console.log('üîç Utilisateur non authentifi√©');
      }
      
      console.log('üîç Retour par d√©faut: visitor');
      return 'visitor';
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'ID utilisateur:', error);
      return 'visitor';
    }
  }

  /**
   * Sauvegarde une donn√©e pour l'utilisateur actuel
   * @param {string} key - Cl√© de la donn√©e
   * @param {any} value - Valeur √† sauvegarder
   * @param {string} userId - ID de l'utilisateur (optionnel, auto-d√©tect√© si non fourni)
   */
  static async setUserData(key, value, userId = null) {
    try {
      const currentUserId = userId || await this.getCurrentUserId();
      const storageKey = this.getUserStorageKey(currentUserId, key);
      const serializedValue = typeof value === 'string' ? value : JSON.stringify(value);
      
      console.log(`üíæ setUserData: ${key} -> ${storageKey} (userId: ${currentUserId})`);
      await AsyncStorage.setItem(storageKey, serializedValue);
      console.log(`üíæ Donn√©e sauvegard√©e pour ${currentUserId}: ${key}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la sauvegarde de ${key}:`, error);
      throw error;
    }
  }

  /**
   * R√©cup√®re une donn√©e pour l'utilisateur actuel
   * @param {string} key - Cl√© de la donn√©e
   * @param {any} defaultValue - Valeur par d√©faut si la donn√©e n'existe pas
   * @param {string} userId - ID de l'utilisateur (optionnel, auto-d√©tect√© si non fourni)
   * @returns {Promise<any>} Donn√©e r√©cup√©r√©e
   */
  static async getUserData(key, defaultValue = null, userId = null) {
    try {
      const currentUserId = userId || await this.getCurrentUserId();
      const storageKey = this.getUserStorageKey(currentUserId, key);
      
      console.log(`üîç getUserData: ${key} -> ${storageKey} (userId: ${currentUserId})`);
      
      const value = await AsyncStorage.getItem(storageKey);
      if (value === null) {
        console.log(`üîç Aucune donn√©e trouv√©e pour ${key}, retour de la valeur par d√©faut`);
        return defaultValue;
      }
      
      // Essayer de parser comme JSON, sinon retourner la valeur brute
      try {
        const parsedValue = JSON.parse(value);
        console.log(`üîç Donn√©e r√©cup√©r√©e pour ${key}:`, parsedValue);
        return parsedValue;
      } catch {
        console.log(`üîç Donn√©e brute r√©cup√©r√©e pour ${key}:`, value);
        return value;
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration de ${key}:`, error);
      return defaultValue;
    }
  }

  /**
   * Supprime une donn√©e pour l'utilisateur actuel
   * @param {string} key - Cl√© de la donn√©e
   * @param {string} userId - ID de l'utilisateur (optionnel, auto-d√©tect√© si non fourni)
   */
  static async removeUserData(key, userId = null) {
    try {
      const currentUserId = userId || await this.getCurrentUserId();
      const storageKey = this.getUserStorageKey(currentUserId, key);
      
      await AsyncStorage.removeItem(storageKey);
      console.log(`üóëÔ∏è Donn√©e supprim√©e pour ${currentUserId}: ${key}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression de ${key}:`, error);
      throw error;
    }
  }

  /**
   * R√©cup√®re toutes les donn√©es d'un utilisateur
   * @param {string} userId - ID de l'utilisateur
   * @returns {Promise<Object>} Toutes les donn√©es de l'utilisateur
   */
  static async getAllUserData(userId) {
    try {
      const allKeys = await AsyncStorage.getAllKeys();
      const userKeys = allKeys.filter(key => key.startsWith(`user_${userId}_`));
      
      const userData = {};
      for (const key of userKeys) {
        const dataKey = key.replace(`user_${userId}_`, '');
        const value = await AsyncStorage.getItem(key);
        try {
          userData[dataKey] = JSON.parse(value);
        } catch {
          userData[dataKey] = value;
        }
      }
      
      return userData;
    } catch (error) {
      console.error(`‚ùå Erreur lors de la r√©cup√©ration des donn√©es de ${userId}:`, error);
      return {};
    }
  }

  /**
   * Supprime toutes les donn√©es d'un utilisateur
   * @param {string} userId - ID de l'utilisateur
   */
  static async clearUserData(userId) {
    try {
      const allKeys = await AsyncStorage.getAllKeys();
      const userKeys = allKeys.filter(key => key.startsWith(`user_${userId}_`));
      
      if (userKeys.length > 0) {
        await AsyncStorage.multiRemove(userKeys);
        console.log(`üóëÔ∏è Toutes les donn√©es supprim√©es pour ${userId} (${userKeys.length} cl√©s)`);
      }
    } catch (error) {
      console.error(`‚ùå Erreur lors de la suppression des donn√©es de ${userId}:`, error);
      throw error;
    }
  }

  /**
   * Migre les donn√©es globales vers le stockage priv√© de l'utilisateur actuel
   * @param {Array<string>} keys - Liste des cl√©s √† migrer
   */
  static async migrateGlobalToUserData(keys) {
    try {
      const currentUserId = await this.getCurrentUserId();
      console.log(`üîÑ Migration des donn√©es globales vers ${currentUserId}...`);
      
      for (const key of keys) {
        const globalValue = await AsyncStorage.getItem(key);
        if (globalValue !== null) {
          await this.setUserData(key, globalValue, currentUserId);
          console.log(`‚úÖ Migr√©: ${key}`);
        }
      }
      
      console.log(`‚úÖ Migration termin√©e pour ${currentUserId}`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la migration:', error);
      throw error;
    }
  }

  /**
   * M√©thodes sp√©cialis√©es pour les donn√©es courantes
   */

  // Favoris
  static async getFavorites() {
    return await this.getUserData('favorites', []);
  }

  static async setFavorites(favorites) {
    return await this.setUserData('favorites', favorites);
  }

  static async addFavorite(place) {
    const favorites = await this.getFavorites();
    const exists = favorites.find(fav => fav.id === place.id);
    if (!exists) {
      favorites.push({ ...place, savedDate: new Date().toISOString() });
      await this.setFavorites(favorites);
    }
  }

  static async removeFavorite(placeId) {
    const favorites = await this.getFavorites();
    const filtered = favorites.filter(fav => fav.id !== placeId);
    await this.setFavorites(filtered);
  }

  // Historique des lieux sur la carte
  static async getMapMarkers() {
    return await this.getUserData('mapMarkers', []);
  }

  static async setMapMarkers(markers) {
    return await this.setUserData('mapMarkers', markers);
  }

  static async addMapMarker(marker) {
    const markers = await this.getMapMarkers();
    const exists = markers.find(m => m.id === marker.id);
    if (!exists) {
      markers.push({ ...marker, addedDate: new Date().toISOString() });
      await this.setMapMarkers(markers);
    }
  }

  // Param√®tres d'accessibilit√©
  static async getAccessibilityPrefs() {
    return await this.getUserData('accessibilityPrefs', {
      requireRamp: false,
      requireElevator: false,
      requireAccessibleParking: false,
      requireAccessibleToilets: false,
    });
  }

  static async setAccessibilityPrefs(prefs) {
    return await this.setUserData('accessibilityPrefs', prefs);
  }

  // Param√®tres de notification
  static async getNotificationPrefs() {
    return await this.getUserData('notifications', {
      newPlaces: false,
      reviews: false,
      updates: false,
    });
  }

  static async setNotificationPrefs(prefs) {
    return await this.setUserData('notifications', prefs);
  }

  // Rayon de recherche
  static async getSearchRadius() {
    return await this.getUserData('searchRadius', 800);
  }

  static async setSearchRadius(radius) {
    return await this.setUserData('searchRadius', radius);
  }

  // Style de carte
  static async getMapStyle() {
    return await this.getUserData('mapStyle', 'standard');
  }

  static async setMapStyle(style) {
    return await this.setUserData('mapStyle', style);
  }

  // Pr√©f√©rences biom√©triques
  static async getBiometricPrefs() {
    return await this.getUserData('biometricPreferences', {
      enabled: false,
      type: 'fingerprint'
    });
  }

  static async setBiometricPrefs(prefs) {
    return await this.setUserData('biometricPreferences', prefs);
  }

  // Token push
  static async getPushToken() {
    return await this.getUserData('pushToken', null);
  }

  static async setPushToken(token) {
    return await this.setUserData('pushToken', token);
  }

  // Historique des lieux visit√©s
  static async getHistory() {
    return await this.getUserData('history', []);
  }

  static async setHistory(history) {
    return await this.setUserData('history', history);
  }

  // Param√®tres g√©n√©raux (settings)
  static async getSettings() {
    return await this.getUserData('settings', {});
  }

  static async setSettings(settings) {
    return await this.setUserData('settings', settings);
  }

  /**
   * Initialise le service de stockage et migre les donn√©es existantes
   */
  static async initialize() {
    try {
      console.log('üíæ Initialisation du service de stockage priv√©...');
      
      // Liste des cl√©s √† migrer depuis le stockage global
      const keysToMigrate = [
        'favorites',
        'mapMarkers', 
        'accessibilityPrefs',
        'notifications',
        'searchRadius',
        'mapStyle',
        'biometricPreferences',
        'pushToken'
      ];

      // Migrer les donn√©es globales vers le stockage priv√©
      await this.migrateGlobalToUserData(keysToMigrate);
      
      console.log('‚úÖ Service de stockage priv√© initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du stockage:', error);
    }
  }
}

export default StorageService; 
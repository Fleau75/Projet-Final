import CryptoJS from 'react-native-crypto-js';
import AsyncStorage from '@react-native-async-storage/async-storage';
import ConfigService from './configService';

/**
 * Service de chiffrement pour s√©curiser les donn√©es sensibles
 * Utilise AES-256 pour le chiffrement des mots de passe
 */
class CryptoService {
  // Obtenir la cl√© de chiffrement depuis la configuration
  static get ENCRYPTION_KEY() {
    return ConfigService.getEncryptionKey() || 'AccessPlus_Secure_Key_2024_v1';
  }
  
  /**
   * Chiffrer une cha√Æne de caract√®res
   */
  static encrypt(text) {
    try {
      if (!text) return null;
      
      const encrypted = CryptoJS.AES.encrypt(text, this.ENCRYPTION_KEY).toString();
      console.log('üîê Texte chiffr√© avec succ√®s');
      return encrypted;
    } catch (error) {
      console.error('‚ùå Erreur lors du chiffrement:', error);
      return null;
    }
  }
  
  /**
   * D√©chiffrer une cha√Æne de caract√®res
   */
  static decrypt(encryptedText) {
    try {
      if (!encryptedText) return null;
      
      const decrypted = CryptoJS.AES.decrypt(encryptedText, this.ENCRYPTION_KEY);
      const originalText = decrypted.toString(CryptoJS.enc.Utf8);
      
      if (!originalText) {
        console.warn('‚ö†Ô∏è Impossible de d√©chiffrer le texte');
        return null;
      }
      
      console.log('üîì Texte d√©chiffr√© avec succ√®s');
      return originalText;
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©chiffrement:', error);
      return null;
    }
  }
  
  /**
   * Stocker une valeur chiffr√©e dans AsyncStorage
   */
  static async setEncryptedItem(key, value) {
    try {
      const encryptedValue = this.encrypt(value);
      if (encryptedValue) {
        await AsyncStorage.setItem(key, encryptedValue);
        console.log(`üîê Valeur chiffr√©e stock√©e pour la cl√©: ${key}`);
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå Erreur lors du stockage chiffr√©:', error);
      return false;
    }
  }
  
  /**
   * R√©cup√©rer et d√©chiffrer une valeur depuis AsyncStorage
   */
  static async getEncryptedItem(key) {
    try {
      const encryptedValue = await AsyncStorage.getItem(key);
      if (encryptedValue) {
        const decryptedValue = this.decrypt(encryptedValue);
        console.log(`üîì Valeur d√©chiffr√©e r√©cup√©r√©e pour la cl√©: ${key}`);
        return decryptedValue;
      }
      return null;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration chiffr√©e:', error);
      return null;
    }
  }
  
  /**
   * Migrer les donn√©es existantes vers le chiffrement
   * Cette fonction sera utilis√©e pour migrer les mots de passe en clair
   */
  static async migrateToEncryption() {
    try {
      console.log('üîÑ D√©but de la migration vers le chiffrement...');
      
      // Migrer les mots de passe utilisateur
      const allKeys = await AsyncStorage.getAllKeys();
      const userKeys = allKeys.filter(key => key.startsWith('user_'));
      
      for (const key of userKeys) {
        const userData = await AsyncStorage.getItem(key);
        if (userData) {
          try {
            const user = JSON.parse(userData);
            if (user.password && !user.password.startsWith('U2F')) {
              // Le mot de passe n'est pas encore chiffr√©
              console.log(`üîÑ Migration du mot de passe pour: ${user.email}`);
              user.password = this.encrypt(user.password);
              await AsyncStorage.setItem(key, JSON.stringify(user));
              console.log(`‚úÖ Migration r√©ussie pour: ${user.email}`);
            }
          } catch (parseError) {
            // G√©rer le cas sp√©cial du visiteur o√π les donn√©es ne sont pas au format JSON
            if (key.includes('visiteur@accessplus.com')) {
              console.log(`üîÑ Migration sp√©ciale pour le visiteur: ${key}`);
              // Le visiteur a un mot de passe stock√© directement
              if (userData && !userData.startsWith('U2F')) {
                const encryptedPassword = this.encrypt(userData);
                await AsyncStorage.setItem(key, encryptedPassword);
                console.log(`‚úÖ Migration du visiteur r√©ussie pour: ${key}`);
              }
            } else {
              console.warn(`‚ö†Ô∏è Erreur lors du parsing de ${key}:`, parseError);
            }
          }
        }
      }
      
      // Migrer le mot de passe principal
      const mainPassword = await AsyncStorage.getItem('userPassword');
      if (mainPassword && !mainPassword.startsWith('U2F')) {
        console.log('üîÑ Migration du mot de passe principal...');
        await this.setEncryptedItem('userPassword', mainPassword);
        await AsyncStorage.removeItem('userPassword');
        console.log('‚úÖ Migration du mot de passe principal r√©ussie');
      }
      
      console.log('‚úÖ Migration vers le chiffrement termin√©e');
    } catch (error) {
      console.error('‚ùå Erreur lors de la migration:', error);
    }
  }
  
  /**
   * V√©rifier si les donn√©es sont chiffr√©es
   */
  static isEncrypted(text) {
    return text && text.startsWith('U2F');
  }
}

export default CryptoService; 